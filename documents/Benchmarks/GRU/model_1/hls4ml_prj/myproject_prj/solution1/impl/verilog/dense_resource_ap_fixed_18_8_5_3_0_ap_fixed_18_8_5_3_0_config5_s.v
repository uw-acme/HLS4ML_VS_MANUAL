// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_resource_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [16:0] data_0_V_read;
input  [16:0] data_1_V_read;
input  [16:0] data_2_V_read;
input  [16:0] data_3_V_read;
input  [16:0] data_4_V_read;
output  [17:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[17:0] ap_return;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [17:0] add_ln703_3_fu_92_p2;
reg   [17:0] add_ln703_3_reg_189;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
wire  signed [27:0] mul_ln1118_7_fu_154_p2;
wire  signed [27:0] mul_ln1118_8_fu_161_p2;
wire   [17:0] trunc_ln708_3_fu_77_p4;
wire   [17:0] add_ln703_2_fu_86_p2;
wire   [17:0] trunc_ln708_2_fu_64_p4;
wire   [27:0] mul_ln1118_fu_168_p2;
wire  signed [27:0] mul_ln1118_5_fu_175_p2;
wire   [27:0] mul_ln1118_6_fu_182_p2;
wire   [17:0] trunc_ln708_s_fu_115_p4;
wire   [17:0] trunc_ln708_1_fu_128_p4;
wire   [17:0] add_ln703_fu_137_p2;
wire   [17:0] trunc_ln_fu_102_p4;
wire   [17:0] add_ln703_1_fu_143_p2;
wire   [16:0] mul_ln1118_7_fu_154_p0;
wire  signed [12:0] mul_ln1118_7_fu_154_p1;
wire   [16:0] mul_ln1118_8_fu_161_p0;
wire  signed [11:0] mul_ln1118_8_fu_161_p1;
wire   [16:0] mul_ln1118_fu_168_p0;
wire   [11:0] mul_ln1118_fu_168_p1;
wire   [16:0] mul_ln1118_5_fu_175_p0;
wire  signed [12:0] mul_ln1118_5_fu_175_p1;
wire   [16:0] mul_ln1118_6_fu_182_p0;
wire   [11:0] mul_ln1118_6_fu_182_p1;
wire   [17:0] add_ln703_4_fu_149_p2;
reg   [17:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
wire   [27:0] mul_ln1118_5_fu_175_p00;
wire   [27:0] mul_ln1118_6_fu_182_p00;
wire   [27:0] mul_ln1118_7_fu_154_p00;
wire   [27:0] mul_ln1118_8_fu_161_p00;
wire   [27:0] mul_ln1118_fu_168_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 18'd0;
end

myproject_mul_mul_17ns_13s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 28 ))
myproject_mul_mul_17ns_13s_28_1_1_U240(
    .din0(mul_ln1118_7_fu_154_p0),
    .din1(mul_ln1118_7_fu_154_p1),
    .dout(mul_ln1118_7_fu_154_p2)
);

myproject_mul_mul_17ns_12s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
myproject_mul_mul_17ns_12s_28_1_1_U241(
    .din0(mul_ln1118_8_fu_161_p0),
    .din1(mul_ln1118_8_fu_161_p1),
    .dout(mul_ln1118_8_fu_161_p2)
);

myproject_mul_mul_17ns_12ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
myproject_mul_mul_17ns_12ns_28_1_1_U242(
    .din0(mul_ln1118_fu_168_p0),
    .din1(mul_ln1118_fu_168_p1),
    .dout(mul_ln1118_fu_168_p2)
);

myproject_mul_mul_17ns_13s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 28 ))
myproject_mul_mul_17ns_13s_28_1_1_U243(
    .din0(mul_ln1118_5_fu_175_p0),
    .din1(mul_ln1118_5_fu_175_p1),
    .dout(mul_ln1118_5_fu_175_p2)
);

myproject_mul_mul_17ns_12ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
myproject_mul_mul_17ns_12ns_28_1_1_U244(
    .din0(mul_ln1118_6_fu_182_p0),
    .din1(mul_ln1118_6_fu_182_p1),
    .dout(mul_ln1118_6_fu_182_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 18'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= add_ln703_4_fu_149_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln703_3_reg_189 <= add_ln703_3_fu_92_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = add_ln703_4_fu_149_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_143_p2 = (add_ln703_fu_137_p2 + trunc_ln_fu_102_p4);

assign add_ln703_2_fu_86_p2 = ($signed(trunc_ln708_3_fu_77_p4) + $signed(18'd262082));

assign add_ln703_3_fu_92_p2 = (add_ln703_2_fu_86_p2 + trunc_ln708_2_fu_64_p4);

assign add_ln703_4_fu_149_p2 = (add_ln703_3_reg_189 + add_ln703_1_fu_143_p2);

assign add_ln703_fu_137_p2 = (trunc_ln708_s_fu_115_p4 + trunc_ln708_1_fu_128_p4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign mul_ln1118_5_fu_175_p0 = mul_ln1118_5_fu_175_p00;

assign mul_ln1118_5_fu_175_p00 = data_1_V_read;

assign mul_ln1118_5_fu_175_p1 = 28'd268432374;

assign mul_ln1118_6_fu_182_p0 = mul_ln1118_6_fu_182_p00;

assign mul_ln1118_6_fu_182_p00 = data_2_V_read;

assign mul_ln1118_6_fu_182_p1 = 28'd1371;

assign mul_ln1118_7_fu_154_p0 = mul_ln1118_7_fu_154_p00;

assign mul_ln1118_7_fu_154_p00 = data_3_V_read;

assign mul_ln1118_7_fu_154_p1 = 28'd268433108;

assign mul_ln1118_8_fu_161_p0 = mul_ln1118_8_fu_161_p00;

assign mul_ln1118_8_fu_161_p00 = data_4_V_read;

assign mul_ln1118_8_fu_161_p1 = 28'd268433638;

assign mul_ln1118_fu_168_p0 = mul_ln1118_fu_168_p00;

assign mul_ln1118_fu_168_p00 = data_0_V_read;

assign mul_ln1118_fu_168_p1 = 28'd1484;

assign trunc_ln708_1_fu_128_p4 = {{mul_ln1118_6_fu_182_p2[27:10]}};

assign trunc_ln708_2_fu_64_p4 = {{mul_ln1118_7_fu_154_p2[27:10]}};

assign trunc_ln708_3_fu_77_p4 = {{mul_ln1118_8_fu_161_p2[27:10]}};

assign trunc_ln708_s_fu_115_p4 = {{mul_ln1118_5_fu_175_p2[27:10]}};

assign trunc_ln_fu_102_p4 = {{mul_ln1118_fu_168_p2[27:10]}};

endmodule //dense_resource_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_config5_s
