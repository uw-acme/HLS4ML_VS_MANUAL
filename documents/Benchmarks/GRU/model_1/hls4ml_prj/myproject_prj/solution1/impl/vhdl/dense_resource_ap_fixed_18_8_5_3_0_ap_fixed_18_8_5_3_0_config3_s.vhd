-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_resource_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_config3_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (17 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (17 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of dense_resource_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_config3_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv18_D0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000011010000";
    constant ap_const_lv18_25A : STD_LOGIC_VECTOR (17 downto 0) := "000000001001011010";
    constant ap_const_lv18_C9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000011001001";
    constant ap_const_lv18_3FF34 : STD_LOGIC_VECTOR (17 downto 0) := "111111111100110100";
    constant ap_const_lv18_18D : STD_LOGIC_VECTOR (17 downto 0) := "000000000110001101";
    constant ap_const_lv28_FFFFE74 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111111001110100";
    constant ap_const_lv27_7FFFF1B : STD_LOGIC_VECTOR (26 downto 0) := "111111111111111111100011011";
    constant ap_const_lv28_922 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100100100010";
    constant ap_const_lv28_212 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000010010";
    constant ap_const_lv28_FFFFC90 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111110010010000";
    constant ap_const_lv28_FFFFA68 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111101001101000";
    constant ap_const_lv28_FFFFD78 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111110101111000";
    constant ap_const_lv28_2EE : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001011101110";
    constant ap_const_lv28_661 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000011001100001";
    constant ap_const_lv28_445 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010001000101";
    constant ap_const_lv28_CD0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000110011010000";
    constant ap_const_lv28_FFFFB64 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111101101100100";
    constant ap_const_lv28_6DF : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000011011011111";
    constant ap_const_lv28_FFFFCBA : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111110010111010";
    constant ap_const_lv28_FFFFA9A : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111101010011010";
    constant ap_const_lv27_B2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010110010";
    constant ap_const_lv28_62E : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000011000101110";
    constant ap_const_lv28_274 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001001110100";
    constant ap_const_lv28_FFFFC21 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111110000100001";
    constant ap_const_lv28_14F : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000101001111";
    constant ap_const_lv28_766 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000011101100110";
    constant ap_const_lv28_443 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010001000011";
    constant ap_const_lv28_FFFF6A3 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111011010100011";
    constant ap_const_lv28_FFFFD69 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111110101101001";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln708_s_reg_750 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal sext_ln1118_14_fu_167_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1118_14_reg_755 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln703_5_fu_186_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_5_reg_762 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_10_fu_256_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_10_reg_767 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_15_fu_295_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_15_reg_772 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_20_fu_334_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_20_reg_777 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_22_reg_782 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln703_25_fu_382_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_25_reg_787 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln1118_fu_120_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_fu_585_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1118_10_fu_133_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_9_fu_592_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln1118_10_fu_599_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1118_14_fu_167_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_11_fu_606_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln708_5_fu_171_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_4_fu_154_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln_fu_124_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_fu_180_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln_fu_192_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln_fu_192_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln1118_s_fu_204_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln1118_s_fu_204_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1118_17_fu_212_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln1118_16_fu_200_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln1118_fu_216_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_13_fu_613_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_14_fu_620_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln708_9_fu_241_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_8_fu_232_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_7_fu_222_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_9_fu_250_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_17_fu_627_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_18_fu_634_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_19_fu_641_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln708_11_fu_280_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_10_fu_271_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_3_fu_262_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_14_fu_289_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_22_fu_648_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_23_fu_655_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_24_fu_662_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln708_16_fu_319_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_15_fu_310_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_14_fu_301_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_19_fu_328_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_27_fu_669_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_28_fu_676_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_29_fu_683_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_30_fu_690_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln708_21_fu_358_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_20_fu_349_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_19_fu_340_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_24_fu_376_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_12_fu_697_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln708_fu_388_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_6_fu_395_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_6_fu_404_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_7_fu_410_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_15_fu_704_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_16_fu_710_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln708_2_fu_430_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_1_fu_421_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_11_fu_439_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_12_fu_445_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_20_fu_717_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_21_fu_723_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln708_13_fu_465_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_12_fu_456_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_16_fu_474_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_17_fu_480_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_25_fu_730_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_26_fu_736_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln708_18_fu_500_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_17_fu_491_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_21_fu_509_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_22_fu_515_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_31_fu_743_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln708_1_fu_526_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_23_fu_529_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_26_fu_538_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_27_fu_544_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_8_fu_416_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_13_fu_451_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_18_fu_486_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_23_fu_521_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_28_fu_550_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_fu_585_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_fu_120_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_fu_585_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_9_fu_592_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_10_fu_599_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_12_fu_150_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_10_fu_599_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_11_fu_606_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_13_fu_613_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_10_fu_133_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_13_fu_613_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_14_fu_620_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_14_fu_620_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_17_fu_627_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_17_fu_627_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_18_fu_634_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_18_fu_634_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_19_fu_641_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_19_fu_641_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_22_fu_648_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_22_fu_648_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_23_fu_655_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_23_fu_655_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_24_fu_662_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_24_fu_662_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_27_fu_669_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_27_fu_669_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_28_fu_676_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_28_fu_676_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_29_fu_683_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_29_fu_683_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_30_fu_690_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_12_fu_697_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_15_fu_391_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_12_fu_697_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_15_fu_704_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_15_fu_704_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_16_fu_710_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_16_fu_710_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1118_20_fu_717_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_20_fu_717_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_21_fu_723_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_21_fu_723_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_25_fu_730_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_25_fu_730_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_26_fu_736_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_26_fu_736_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_31_fu_743_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_31_fu_743_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component myproject_mul_mul_18s_10s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component myproject_mul_mul_18s_9s_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_mul_mul_18s_13ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component myproject_mul_mul_18s_11ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component myproject_mul_mul_18s_11s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component myproject_mul_mul_18s_12s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component myproject_mul_mul_18s_12ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component myproject_mul_mul_18s_9ns_27_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component myproject_mul_mul_18s_10ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component myproject_mul_mul_18s_13s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    myproject_mul_mul_18s_10s_28_1_1_U206 : component myproject_mul_mul_18s_10s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 10,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_fu_585_p0,
        din1 => mul_ln1118_fu_585_p1,
        dout => mul_ln1118_fu_585_p2);

    myproject_mul_mul_18s_9s_27_1_1_U207 : component myproject_mul_mul_18s_9s_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 9,
        dout_WIDTH => 27)
    port map (
        din0 => data_1_V_read,
        din1 => mul_ln1118_9_fu_592_p1,
        dout => mul_ln1118_9_fu_592_p2);

    myproject_mul_mul_18s_13ns_28_1_1_U208 : component myproject_mul_mul_18s_13ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_10_fu_599_p0,
        din1 => mul_ln1118_10_fu_599_p1,
        dout => mul_ln1118_10_fu_599_p2);

    myproject_mul_mul_18s_11ns_28_1_1_U209 : component myproject_mul_mul_18s_11ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 11,
        dout_WIDTH => 28)
    port map (
        din0 => data_3_V_read,
        din1 => mul_ln1118_11_fu_606_p1,
        dout => mul_ln1118_11_fu_606_p2);

    myproject_mul_mul_18s_11s_28_1_1_U210 : component myproject_mul_mul_18s_11s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 11,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_13_fu_613_p0,
        din1 => mul_ln1118_13_fu_613_p1,
        dout => mul_ln1118_13_fu_613_p2);

    myproject_mul_mul_18s_12s_28_1_1_U211 : component myproject_mul_mul_18s_12s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_14_fu_620_p0,
        din1 => mul_ln1118_14_fu_620_p1,
        dout => mul_ln1118_14_fu_620_p2);

    myproject_mul_mul_18s_11s_28_1_1_U212 : component myproject_mul_mul_18s_11s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 11,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_17_fu_627_p0,
        din1 => mul_ln1118_17_fu_627_p1,
        dout => mul_ln1118_17_fu_627_p2);

    myproject_mul_mul_18s_11ns_28_1_1_U213 : component myproject_mul_mul_18s_11ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 11,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_18_fu_634_p0,
        din1 => mul_ln1118_18_fu_634_p1,
        dout => mul_ln1118_18_fu_634_p2);

    myproject_mul_mul_18s_12ns_28_1_1_U214 : component myproject_mul_mul_18s_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_19_fu_641_p0,
        din1 => mul_ln1118_19_fu_641_p1,
        dout => mul_ln1118_19_fu_641_p2);

    myproject_mul_mul_18s_12ns_28_1_1_U215 : component myproject_mul_mul_18s_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_22_fu_648_p0,
        din1 => mul_ln1118_22_fu_648_p1,
        dout => mul_ln1118_22_fu_648_p2);

    myproject_mul_mul_18s_13ns_28_1_1_U216 : component myproject_mul_mul_18s_13ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_23_fu_655_p0,
        din1 => mul_ln1118_23_fu_655_p1,
        dout => mul_ln1118_23_fu_655_p2);

    myproject_mul_mul_18s_12s_28_1_1_U217 : component myproject_mul_mul_18s_12s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_24_fu_662_p0,
        din1 => mul_ln1118_24_fu_662_p1,
        dout => mul_ln1118_24_fu_662_p2);

    myproject_mul_mul_18s_12ns_28_1_1_U218 : component myproject_mul_mul_18s_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_27_fu_669_p0,
        din1 => mul_ln1118_27_fu_669_p1,
        dout => mul_ln1118_27_fu_669_p2);

    myproject_mul_mul_18s_11s_28_1_1_U219 : component myproject_mul_mul_18s_11s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 11,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_28_fu_676_p0,
        din1 => mul_ln1118_28_fu_676_p1,
        dout => mul_ln1118_28_fu_676_p2);

    myproject_mul_mul_18s_12s_28_1_1_U220 : component myproject_mul_mul_18s_12s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_29_fu_683_p0,
        din1 => mul_ln1118_29_fu_683_p1,
        dout => mul_ln1118_29_fu_683_p2);

    myproject_mul_mul_18s_9ns_27_1_1_U221 : component myproject_mul_mul_18s_9ns_27_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 9,
        dout_WIDTH => 27)
    port map (
        din0 => data_3_V_read,
        din1 => mul_ln1118_30_fu_690_p1,
        dout => mul_ln1118_30_fu_690_p2);

    myproject_mul_mul_18s_12ns_28_1_1_U222 : component myproject_mul_mul_18s_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_12_fu_697_p0,
        din1 => mul_ln1118_12_fu_697_p1,
        dout => mul_ln1118_12_fu_697_p2);

    myproject_mul_mul_18s_11ns_28_1_1_U223 : component myproject_mul_mul_18s_11ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 11,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_15_fu_704_p0,
        din1 => mul_ln1118_15_fu_704_p1,
        dout => mul_ln1118_15_fu_704_p2);

    myproject_mul_mul_18s_11s_28_1_1_U224 : component myproject_mul_mul_18s_11s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 11,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_16_fu_710_p0,
        din1 => mul_ln1118_16_fu_710_p1,
        dout => mul_ln1118_16_fu_710_p2);

    myproject_mul_mul_18s_10ns_28_1_1_U225 : component myproject_mul_mul_18s_10ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 10,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_20_fu_717_p0,
        din1 => mul_ln1118_20_fu_717_p1,
        dout => mul_ln1118_20_fu_717_p2);

    myproject_mul_mul_18s_12ns_28_1_1_U226 : component myproject_mul_mul_18s_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_21_fu_723_p0,
        din1 => mul_ln1118_21_fu_723_p1,
        dout => mul_ln1118_21_fu_723_p2);

    myproject_mul_mul_18s_12ns_28_1_1_U227 : component myproject_mul_mul_18s_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_25_fu_730_p0,
        din1 => mul_ln1118_25_fu_730_p1,
        dout => mul_ln1118_25_fu_730_p2);

    myproject_mul_mul_18s_13s_28_1_1_U228 : component myproject_mul_mul_18s_13s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_26_fu_736_p0,
        din1 => mul_ln1118_26_fu_736_p1,
        dout => mul_ln1118_26_fu_736_p2);

    myproject_mul_mul_18s_11s_28_1_1_U229 : component myproject_mul_mul_18s_11s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 11,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_31_fu_743_p0,
        din1 => mul_ln1118_31_fu_743_p1,
        dout => mul_ln1118_31_fu_743_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv18_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_0_preg <= add_ln703_8_fu_416_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv18_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_1_preg <= add_ln703_13_fu_451_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv18_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_2_preg <= add_ln703_18_fu_486_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv18_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_3_preg <= add_ln703_23_fu_521_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv18_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_4_preg <= add_ln703_28_fu_550_p2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln703_10_reg_767 <= add_ln703_10_fu_256_p2;
                add_ln703_15_reg_772 <= add_ln703_15_fu_295_p2;
                add_ln703_20_reg_777 <= add_ln703_20_fu_334_p2;
                add_ln703_25_reg_787 <= add_ln703_25_fu_382_p2;
                add_ln703_5_reg_762 <= add_ln703_5_fu_186_p2;
                sext_ln1118_14_reg_755 <= sext_ln1118_14_fu_167_p1;
                trunc_ln708_22_reg_782 <= mul_ln1118_30_fu_690_p2(26 downto 10);
                trunc_ln708_s_reg_750 <= mul_ln1118_9_fu_592_p2(26 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1118_fu_216_p2 <= std_logic_vector(signed(sext_ln1118_17_fu_212_p1) + signed(sext_ln1118_16_fu_200_p1));
    add_ln703_10_fu_256_p2 <= std_logic_vector(unsigned(trunc_ln708_7_fu_222_p4) + unsigned(add_ln703_9_fu_250_p2));
    add_ln703_11_fu_439_p2 <= std_logic_vector(unsigned(trunc_ln708_2_fu_430_p4) + unsigned(ap_const_lv18_25A));
    add_ln703_12_fu_445_p2 <= std_logic_vector(unsigned(trunc_ln708_1_fu_421_p4) + unsigned(add_ln703_11_fu_439_p2));
    add_ln703_13_fu_451_p2 <= std_logic_vector(unsigned(add_ln703_10_reg_767) + unsigned(add_ln703_12_fu_445_p2));
    add_ln703_14_fu_289_p2 <= std_logic_vector(unsigned(trunc_ln708_11_fu_280_p4) + unsigned(trunc_ln708_10_fu_271_p4));
    add_ln703_15_fu_295_p2 <= std_logic_vector(unsigned(trunc_ln708_3_fu_262_p4) + unsigned(add_ln703_14_fu_289_p2));
    add_ln703_16_fu_474_p2 <= std_logic_vector(unsigned(trunc_ln708_13_fu_465_p4) + unsigned(ap_const_lv18_C9));
    add_ln703_17_fu_480_p2 <= std_logic_vector(unsigned(trunc_ln708_12_fu_456_p4) + unsigned(add_ln703_16_fu_474_p2));
    add_ln703_18_fu_486_p2 <= std_logic_vector(unsigned(add_ln703_15_reg_772) + unsigned(add_ln703_17_fu_480_p2));
    add_ln703_19_fu_328_p2 <= std_logic_vector(unsigned(trunc_ln708_16_fu_319_p4) + unsigned(trunc_ln708_15_fu_310_p4));
    add_ln703_20_fu_334_p2 <= std_logic_vector(unsigned(trunc_ln708_14_fu_301_p4) + unsigned(add_ln703_19_fu_328_p2));
    add_ln703_21_fu_509_p2 <= std_logic_vector(unsigned(trunc_ln708_18_fu_500_p4) + unsigned(ap_const_lv18_3FF34));
    add_ln703_22_fu_515_p2 <= std_logic_vector(unsigned(trunc_ln708_17_fu_491_p4) + unsigned(add_ln703_21_fu_509_p2));
    add_ln703_23_fu_521_p2 <= std_logic_vector(unsigned(add_ln703_20_reg_777) + unsigned(add_ln703_22_fu_515_p2));
    add_ln703_24_fu_376_p2 <= std_logic_vector(unsigned(trunc_ln708_21_fu_358_p4) + unsigned(trunc_ln708_20_fu_349_p4));
    add_ln703_25_fu_382_p2 <= std_logic_vector(unsigned(trunc_ln708_19_fu_340_p4) + unsigned(add_ln703_24_fu_376_p2));
    add_ln703_26_fu_538_p2 <= std_logic_vector(signed(sext_ln708_1_fu_526_p1) + signed(ap_const_lv18_18D));
    add_ln703_27_fu_544_p2 <= std_logic_vector(unsigned(trunc_ln708_23_fu_529_p4) + unsigned(add_ln703_26_fu_538_p2));
    add_ln703_28_fu_550_p2 <= std_logic_vector(unsigned(add_ln703_25_reg_787) + unsigned(add_ln703_27_fu_544_p2));
    add_ln703_5_fu_186_p2 <= std_logic_vector(unsigned(trunc_ln_fu_124_p4) + unsigned(add_ln703_fu_180_p2));
    add_ln703_6_fu_404_p2 <= std_logic_vector(signed(sext_ln708_fu_388_p1) + signed(ap_const_lv18_D0));
    add_ln703_7_fu_410_p2 <= std_logic_vector(unsigned(trunc_ln708_6_fu_395_p4) + unsigned(add_ln703_6_fu_404_p2));
    add_ln703_8_fu_416_p2 <= std_logic_vector(unsigned(add_ln703_5_reg_762) + unsigned(add_ln703_7_fu_410_p2));
    add_ln703_9_fu_250_p2 <= std_logic_vector(unsigned(trunc_ln708_9_fu_241_p4) + unsigned(trunc_ln708_8_fu_232_p4));
    add_ln703_fu_180_p2 <= std_logic_vector(unsigned(trunc_ln708_5_fu_171_p4) + unsigned(trunc_ln708_4_fu_154_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state2, add_ln703_8_fu_416_p2, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_0 <= add_ln703_8_fu_416_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state2, add_ln703_13_fu_451_p2, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_1 <= add_ln703_13_fu_451_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state2, add_ln703_18_fu_486_p2, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_2 <= add_ln703_18_fu_486_p2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state2, add_ln703_23_fu_521_p2, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_3 <= add_ln703_23_fu_521_p2;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state2, add_ln703_28_fu_550_p2, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_4 <= add_ln703_28_fu_550_p2;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;

    mul_ln1118_10_fu_599_p0 <= sext_ln1118_12_fu_150_p1(18 - 1 downto 0);
    mul_ln1118_10_fu_599_p1 <= ap_const_lv28_922(13 - 1 downto 0);
    mul_ln1118_11_fu_606_p1 <= ap_const_lv28_212(11 - 1 downto 0);
    mul_ln1118_12_fu_697_p0 <= sext_ln1118_15_fu_391_p1(18 - 1 downto 0);
    mul_ln1118_12_fu_697_p1 <= ap_const_lv28_62E(12 - 1 downto 0);
    mul_ln1118_13_fu_613_p0 <= sext_ln1118_10_fu_133_p1(18 - 1 downto 0);
    mul_ln1118_13_fu_613_p1 <= ap_const_lv28_FFFFC90(11 - 1 downto 0);
    mul_ln1118_14_fu_620_p0 <= sext_ln1118_12_fu_150_p1(18 - 1 downto 0);
    mul_ln1118_14_fu_620_p1 <= ap_const_lv28_FFFFA68(12 - 1 downto 0);
    mul_ln1118_15_fu_704_p0 <= sext_ln1118_14_reg_755(18 - 1 downto 0);
    mul_ln1118_15_fu_704_p1 <= ap_const_lv28_274(11 - 1 downto 0);
    mul_ln1118_16_fu_710_p0 <= sext_ln1118_15_fu_391_p1(18 - 1 downto 0);
    mul_ln1118_16_fu_710_p1 <= ap_const_lv28_FFFFC21(11 - 1 downto 0);
    mul_ln1118_17_fu_627_p0 <= sext_ln1118_fu_120_p1(18 - 1 downto 0);
    mul_ln1118_17_fu_627_p1 <= ap_const_lv28_FFFFD78(11 - 1 downto 0);
    mul_ln1118_18_fu_634_p0 <= sext_ln1118_10_fu_133_p1(18 - 1 downto 0);
    mul_ln1118_18_fu_634_p1 <= ap_const_lv28_2EE(11 - 1 downto 0);
    mul_ln1118_19_fu_641_p0 <= sext_ln1118_12_fu_150_p1(18 - 1 downto 0);
    mul_ln1118_19_fu_641_p1 <= ap_const_lv28_661(12 - 1 downto 0);
    mul_ln1118_20_fu_717_p0 <= sext_ln1118_14_reg_755(18 - 1 downto 0);
    mul_ln1118_20_fu_717_p1 <= ap_const_lv28_14F(10 - 1 downto 0);
    mul_ln1118_21_fu_723_p0 <= sext_ln1118_15_fu_391_p1(18 - 1 downto 0);
    mul_ln1118_21_fu_723_p1 <= ap_const_lv28_766(12 - 1 downto 0);
    mul_ln1118_22_fu_648_p0 <= sext_ln1118_fu_120_p1(18 - 1 downto 0);
    mul_ln1118_22_fu_648_p1 <= ap_const_lv28_445(12 - 1 downto 0);
    mul_ln1118_23_fu_655_p0 <= sext_ln1118_10_fu_133_p1(18 - 1 downto 0);
    mul_ln1118_23_fu_655_p1 <= ap_const_lv28_CD0(13 - 1 downto 0);
    mul_ln1118_24_fu_662_p0 <= sext_ln1118_12_fu_150_p1(18 - 1 downto 0);
    mul_ln1118_24_fu_662_p1 <= ap_const_lv28_FFFFB64(12 - 1 downto 0);
    mul_ln1118_25_fu_730_p0 <= sext_ln1118_14_reg_755(18 - 1 downto 0);
    mul_ln1118_25_fu_730_p1 <= ap_const_lv28_443(12 - 1 downto 0);
    mul_ln1118_26_fu_736_p0 <= sext_ln1118_15_fu_391_p1(18 - 1 downto 0);
    mul_ln1118_26_fu_736_p1 <= ap_const_lv28_FFFF6A3(13 - 1 downto 0);
    mul_ln1118_27_fu_669_p0 <= sext_ln1118_fu_120_p1(18 - 1 downto 0);
    mul_ln1118_27_fu_669_p1 <= ap_const_lv28_6DF(12 - 1 downto 0);
    mul_ln1118_28_fu_676_p0 <= sext_ln1118_10_fu_133_p1(18 - 1 downto 0);
    mul_ln1118_28_fu_676_p1 <= ap_const_lv28_FFFFCBA(11 - 1 downto 0);
    mul_ln1118_29_fu_683_p0 <= sext_ln1118_12_fu_150_p1(18 - 1 downto 0);
    mul_ln1118_29_fu_683_p1 <= ap_const_lv28_FFFFA9A(12 - 1 downto 0);
    mul_ln1118_30_fu_690_p1 <= ap_const_lv27_B2(9 - 1 downto 0);
    mul_ln1118_31_fu_743_p0 <= sext_ln1118_15_fu_391_p1(18 - 1 downto 0);
    mul_ln1118_31_fu_743_p1 <= ap_const_lv28_FFFFD69(11 - 1 downto 0);
    mul_ln1118_9_fu_592_p1 <= ap_const_lv27_7FFFF1B(9 - 1 downto 0);
    mul_ln1118_fu_585_p0 <= sext_ln1118_fu_120_p1(18 - 1 downto 0);
    mul_ln1118_fu_585_p1 <= ap_const_lv28_FFFFE74(10 - 1 downto 0);
    sext_ln1118_10_fu_133_p0 <= data_1_V_read;
        sext_ln1118_10_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_10_fu_133_p0),28));

        sext_ln1118_12_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_2_V_read),28));

    sext_ln1118_14_fu_167_p0 <= data_3_V_read;
        sext_ln1118_14_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_14_fu_167_p0),28));

        sext_ln1118_15_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_4_V_read),28));

        sext_ln1118_16_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_192_p3),28));

        sext_ln1118_17_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_s_fu_204_p3),28));

    sext_ln1118_fu_120_p0 <= data_0_V_read;
        sext_ln1118_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_fu_120_p0),28));

        sext_ln708_1_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_22_reg_782),18));

        sext_ln708_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_s_reg_750),18));

    shl_ln1118_s_fu_204_p1 <= data_0_V_read;
    shl_ln1118_s_fu_204_p3 <= (shl_ln1118_s_fu_204_p1 & ap_const_lv1_0);
    shl_ln_fu_192_p1 <= data_0_V_read;
    shl_ln_fu_192_p3 <= (shl_ln_fu_192_p1 & ap_const_lv9_0);
    trunc_ln708_10_fu_271_p4 <= mul_ln1118_18_fu_634_p2(27 downto 10);
    trunc_ln708_11_fu_280_p4 <= mul_ln1118_19_fu_641_p2(27 downto 10);
    trunc_ln708_12_fu_456_p4 <= mul_ln1118_20_fu_717_p2(27 downto 10);
    trunc_ln708_13_fu_465_p4 <= mul_ln1118_21_fu_723_p2(27 downto 10);
    trunc_ln708_14_fu_301_p4 <= mul_ln1118_22_fu_648_p2(27 downto 10);
    trunc_ln708_15_fu_310_p4 <= mul_ln1118_23_fu_655_p2(27 downto 10);
    trunc_ln708_16_fu_319_p4 <= mul_ln1118_24_fu_662_p2(27 downto 10);
    trunc_ln708_17_fu_491_p4 <= mul_ln1118_25_fu_730_p2(27 downto 10);
    trunc_ln708_18_fu_500_p4 <= mul_ln1118_26_fu_736_p2(27 downto 10);
    trunc_ln708_19_fu_340_p4 <= mul_ln1118_27_fu_669_p2(27 downto 10);
    trunc_ln708_1_fu_421_p4 <= mul_ln1118_15_fu_704_p2(27 downto 10);
    trunc_ln708_20_fu_349_p4 <= mul_ln1118_28_fu_676_p2(27 downto 10);
    trunc_ln708_21_fu_358_p4 <= mul_ln1118_29_fu_683_p2(27 downto 10);
    trunc_ln708_23_fu_529_p4 <= mul_ln1118_31_fu_743_p2(27 downto 10);
    trunc_ln708_2_fu_430_p4 <= mul_ln1118_16_fu_710_p2(27 downto 10);
    trunc_ln708_3_fu_262_p4 <= mul_ln1118_17_fu_627_p2(27 downto 10);
    trunc_ln708_4_fu_154_p4 <= mul_ln1118_10_fu_599_p2(27 downto 10);
    trunc_ln708_5_fu_171_p4 <= mul_ln1118_11_fu_606_p2(27 downto 10);
    trunc_ln708_6_fu_395_p4 <= mul_ln1118_12_fu_697_p2(27 downto 10);
    trunc_ln708_7_fu_222_p4 <= add_ln1118_fu_216_p2(27 downto 10);
    trunc_ln708_8_fu_232_p4 <= mul_ln1118_13_fu_613_p2(27 downto 10);
    trunc_ln708_9_fu_241_p4 <= mul_ln1118_14_fu_620_p2(27 downto 10);
    trunc_ln_fu_124_p4 <= mul_ln1118_fu_585_p2(27 downto 10);
end behav;
