-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_resource_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_config5_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of dense_resource_ap_fixed_18_8_5_3_0_ap_fixed_18_8_5_3_0_config5_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv18_3FFC2 : STD_LOGIC_VECTOR (17 downto 0) := "111111111111000010";
    constant ap_const_lv28_FFFF6D4 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111011011010100";
    constant ap_const_lv28_FFFF8E6 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111100011100110";
    constant ap_const_lv28_5CC : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010111001100";
    constant ap_const_lv28_FFFF3F6 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111001111110110";
    constant ap_const_lv28_55B : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010101011011";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln703_3_fu_92_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_3_reg_189 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln1118_7_fu_154_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_8_fu_161_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln708_3_fu_77_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_2_fu_86_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_2_fu_64_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_fu_168_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_5_fu_175_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_6_fu_182_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln708_s_fu_115_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln708_1_fu_128_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_fu_137_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln_fu_102_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_1_fu_143_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_7_fu_154_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_7_fu_154_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_8_fu_161_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_8_fu_161_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_fu_168_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_fu_168_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_5_fu_175_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_5_fu_175_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_6_fu_182_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_6_fu_182_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln703_4_fu_149_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln1118_5_fu_175_p00 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_6_fu_182_p00 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_7_fu_154_p00 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_8_fu_161_p00 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_fu_168_p00 : STD_LOGIC_VECTOR (27 downto 0);

    component myproject_mul_mul_17ns_13s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component myproject_mul_mul_17ns_12s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component myproject_mul_mul_17ns_12ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    myproject_mul_mul_17ns_13s_28_1_1_U240 : component myproject_mul_mul_17ns_13s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_7_fu_154_p0,
        din1 => mul_ln1118_7_fu_154_p1,
        dout => mul_ln1118_7_fu_154_p2);

    myproject_mul_mul_17ns_12s_28_1_1_U241 : component myproject_mul_mul_17ns_12s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_8_fu_161_p0,
        din1 => mul_ln1118_8_fu_161_p1,
        dout => mul_ln1118_8_fu_161_p2);

    myproject_mul_mul_17ns_12ns_28_1_1_U242 : component myproject_mul_mul_17ns_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_fu_168_p0,
        din1 => mul_ln1118_fu_168_p1,
        dout => mul_ln1118_fu_168_p2);

    myproject_mul_mul_17ns_13s_28_1_1_U243 : component myproject_mul_mul_17ns_13s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_5_fu_175_p0,
        din1 => mul_ln1118_5_fu_175_p1,
        dout => mul_ln1118_5_fu_175_p2);

    myproject_mul_mul_17ns_12ns_28_1_1_U244 : component myproject_mul_mul_17ns_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_6_fu_182_p0,
        din1 => mul_ln1118_6_fu_182_p1,
        dout => mul_ln1118_6_fu_182_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv18_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= add_ln703_4_fu_149_p2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln703_3_reg_189 <= add_ln703_3_fu_92_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln703_1_fu_143_p2 <= std_logic_vector(unsigned(add_ln703_fu_137_p2) + unsigned(trunc_ln_fu_102_p4));
    add_ln703_2_fu_86_p2 <= std_logic_vector(unsigned(trunc_ln708_3_fu_77_p4) + unsigned(ap_const_lv18_3FFC2));
    add_ln703_3_fu_92_p2 <= std_logic_vector(unsigned(add_ln703_2_fu_86_p2) + unsigned(trunc_ln708_2_fu_64_p4));
    add_ln703_4_fu_149_p2 <= std_logic_vector(unsigned(add_ln703_3_reg_189) + unsigned(add_ln703_1_fu_143_p2));
    add_ln703_fu_137_p2 <= std_logic_vector(unsigned(trunc_ln708_s_fu_115_p4) + unsigned(trunc_ln708_1_fu_128_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, add_ln703_4_fu_149_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= add_ln703_4_fu_149_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    mul_ln1118_5_fu_175_p0 <= mul_ln1118_5_fu_175_p00(17 - 1 downto 0);
    mul_ln1118_5_fu_175_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_1_V_read),28));
    mul_ln1118_5_fu_175_p1 <= ap_const_lv28_FFFF3F6(13 - 1 downto 0);
    mul_ln1118_6_fu_182_p0 <= mul_ln1118_6_fu_182_p00(17 - 1 downto 0);
    mul_ln1118_6_fu_182_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_2_V_read),28));
    mul_ln1118_6_fu_182_p1 <= ap_const_lv28_55B(12 - 1 downto 0);
    mul_ln1118_7_fu_154_p0 <= mul_ln1118_7_fu_154_p00(17 - 1 downto 0);
    mul_ln1118_7_fu_154_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_3_V_read),28));
    mul_ln1118_7_fu_154_p1 <= ap_const_lv28_FFFF6D4(13 - 1 downto 0);
    mul_ln1118_8_fu_161_p0 <= mul_ln1118_8_fu_161_p00(17 - 1 downto 0);
    mul_ln1118_8_fu_161_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_4_V_read),28));
    mul_ln1118_8_fu_161_p1 <= ap_const_lv28_FFFF8E6(12 - 1 downto 0);
    mul_ln1118_fu_168_p0 <= mul_ln1118_fu_168_p00(17 - 1 downto 0);
    mul_ln1118_fu_168_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_0_V_read),28));
    mul_ln1118_fu_168_p1 <= ap_const_lv28_5CC(12 - 1 downto 0);
    trunc_ln708_1_fu_128_p4 <= mul_ln1118_6_fu_182_p2(27 downto 10);
    trunc_ln708_2_fu_64_p4 <= mul_ln1118_7_fu_154_p2(27 downto 10);
    trunc_ln708_3_fu_77_p4 <= mul_ln1118_8_fu_161_p2(27 downto 10);
    trunc_ln708_s_fu_115_p4 <= mul_ln1118_5_fu_175_p2(27 downto 10);
    trunc_ln_fu_102_p4 <= mul_ln1118_fu_168_p2(27 downto 10);
end behav;
