// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld,
        res_3_V,
        res_3_V_ap_vld,
        res_4_V,
        res_4_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
input  [15:0] data_4_V_read;
output  [15:0] res_0_V;
output   res_0_V_ap_vld;
output  [15:0] res_1_V;
output   res_1_V_ap_vld;
output  [15:0] res_2_V;
output   res_2_V_ap_vld;
output  [15:0] res_3_V;
output   res_3_V_ap_vld;
output  [15:0] res_4_V;
output   res_4_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_0_V_ap_vld;
reg res_1_V_ap_vld;
reg res_2_V_ap_vld;
reg res_3_V_ap_vld;
reg res_4_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [16:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [16:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [16:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [16:0] exp_table1_q4;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
wire   [9:0] y_V_fu_583_p3;
reg   [9:0] y_V_reg_1108;
wire   [9:0] y_V_1_fu_617_p3;
reg   [9:0] y_V_1_reg_1113;
wire   [9:0] y_V_2_fu_651_p3;
reg   [9:0] y_V_2_reg_1118;
wire   [9:0] y_V_3_fu_685_p3;
reg   [9:0] y_V_3_reg_1123;
wire   [9:0] y_V_4_fu_719_p3;
reg   [9:0] y_V_4_reg_1128;
reg   [9:0] y_V_4_reg_1128_pp0_iter1_reg;
reg   [16:0] exp_res_0_V_reg_1153;
reg   [16:0] exp_res_0_V_reg_1153_pp0_iter3_reg;
reg   [16:0] exp_res_1_V_reg_1158;
reg   [16:0] exp_res_1_V_reg_1158_pp0_iter3_reg;
reg   [16:0] exp_res_2_V_reg_1163;
reg   [16:0] exp_res_2_V_reg_1163_pp0_iter3_reg;
reg   [16:0] exp_res_3_V_reg_1168;
reg   [16:0] exp_res_3_V_reg_1168_pp0_iter3_reg;
wire  signed [17:0] p_Val2_16_fu_889_p3;
reg  signed [17:0] p_Val2_16_reg_1178;
reg   [16:0] exp_res_4_V_reg_1184;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln255_fu_727_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln255_1_fu_731_p1;
wire   [63:0] zext_ln255_2_fu_735_p1;
wire   [63:0] zext_ln255_3_fu_739_p1;
wire   [63:0] zext_ln255_4_fu_743_p1;
wire   [63:0] zext_ln265_fu_999_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [15:0] icmp_ln1496_fu_217_p0;
wire  signed [15:0] icmp_ln1496_fu_217_p1;
wire   [0:0] icmp_ln1496_fu_217_p2;
wire  signed [15:0] select_ln65_fu_223_p1;
wire  signed [15:0] select_ln65_fu_223_p2;
wire  signed [15:0] icmp_ln1496_1_fu_231_p0;
wire  signed [15:0] icmp_ln1496_1_fu_231_p1;
wire   [0:0] icmp_ln1496_1_fu_231_p2;
wire  signed [15:0] select_ln65_1_fu_237_p1;
wire  signed [15:0] select_ln65_1_fu_237_p2;
wire   [15:0] select_ln65_fu_223_p3;
wire   [15:0] select_ln65_1_fu_237_p3;
wire   [0:0] icmp_ln1496_2_fu_245_p2;
wire   [15:0] select_ln65_2_fu_251_p3;
wire  signed [15:0] icmp_ln1496_3_fu_259_p1;
wire   [0:0] icmp_ln1496_3_fu_259_p2;
wire  signed [15:0] x_max_V_fu_265_p1;
wire  signed [15:0] sext_ln703_fu_273_p0;
wire   [15:0] x_max_V_fu_265_p3;
wire  signed [16:0] sext_ln703_fu_273_p1;
wire  signed [16:0] sext_ln703_1_fu_277_p1;
wire   [16:0] sub_ln1193_fu_281_p2;
wire   [0:0] tmp_384_fu_295_p3;
wire   [0:0] tmp_383_fu_287_p3;
wire   [0:0] xor_ln786_fu_303_p2;
wire   [0:0] xor_ln340_fu_321_p2;
wire  signed [15:0] sext_ln703_2_fu_333_p0;
wire  signed [16:0] sext_ln703_2_fu_333_p1;
wire   [16:0] sub_ln1193_1_fu_337_p2;
wire   [0:0] tmp_386_fu_351_p3;
wire   [0:0] tmp_385_fu_343_p3;
wire   [0:0] xor_ln786_1_fu_359_p2;
wire   [0:0] xor_ln340_1_fu_377_p2;
wire  signed [15:0] sext_ln703_3_fu_389_p0;
wire  signed [16:0] sext_ln703_3_fu_389_p1;
wire   [16:0] sub_ln1193_2_fu_393_p2;
wire   [0:0] tmp_388_fu_407_p3;
wire   [0:0] tmp_387_fu_399_p3;
wire   [0:0] xor_ln786_2_fu_415_p2;
wire   [0:0] xor_ln340_2_fu_433_p2;
wire  signed [15:0] sext_ln703_4_fu_445_p0;
wire  signed [16:0] sext_ln703_4_fu_445_p1;
wire   [16:0] sub_ln1193_3_fu_449_p2;
wire   [0:0] tmp_390_fu_463_p3;
wire   [0:0] tmp_389_fu_455_p3;
wire   [0:0] xor_ln786_3_fu_471_p2;
wire   [0:0] xor_ln340_3_fu_489_p2;
wire  signed [15:0] sext_ln703_5_fu_501_p0;
wire  signed [16:0] sext_ln703_5_fu_501_p1;
wire   [16:0] sub_ln1193_4_fu_505_p2;
wire   [0:0] tmp_392_fu_519_p3;
wire   [0:0] tmp_391_fu_511_p3;
wire   [0:0] xor_ln786_4_fu_527_p2;
wire   [0:0] xor_ln340_4_fu_545_p2;
wire   [0:0] xor_ln340_5_fu_315_p2;
wire   [9:0] tmp_fu_557_p4;
wire   [0:0] and_ln786_fu_309_p2;
wire   [0:0] or_ln340_fu_327_p2;
wire   [9:0] select_ln340_fu_567_p3;
wire   [9:0] select_ln388_fu_575_p3;
wire   [0:0] xor_ln340_6_fu_371_p2;
wire   [9:0] tmp_2_fu_591_p4;
wire   [0:0] and_ln786_1_fu_365_p2;
wire   [0:0] or_ln340_1_fu_383_p2;
wire   [9:0] select_ln340_2_fu_601_p3;
wire   [9:0] select_ln388_1_fu_609_p3;
wire   [0:0] xor_ln340_7_fu_427_p2;
wire   [9:0] tmp_4_fu_625_p4;
wire   [0:0] and_ln786_2_fu_421_p2;
wire   [0:0] or_ln340_2_fu_439_p2;
wire   [9:0] select_ln340_4_fu_635_p3;
wire   [9:0] select_ln388_2_fu_643_p3;
wire   [0:0] xor_ln340_8_fu_483_p2;
wire   [9:0] tmp_6_fu_659_p4;
wire   [0:0] and_ln786_3_fu_477_p2;
wire   [0:0] or_ln340_3_fu_495_p2;
wire   [9:0] select_ln340_6_fu_669_p3;
wire   [9:0] select_ln388_3_fu_677_p3;
wire   [0:0] xor_ln340_9_fu_539_p2;
wire   [9:0] tmp_8_fu_693_p4;
wire   [0:0] and_ln786_4_fu_533_p2;
wire   [0:0] or_ln340_4_fu_551_p2;
wire   [9:0] select_ln340_8_fu_703_p3;
wire   [9:0] select_ln388_4_fu_711_p3;
wire   [17:0] p_Val2_6_fu_747_p1;
wire   [17:0] p_Val2_7_fu_751_p1;
wire   [17:0] p_Val2_8_fu_755_p2;
wire   [0:0] p_Result_s_fu_761_p3;
wire   [17:0] p_Val2_9_fu_777_p1;
wire   [17:0] p_Val2_10_fu_781_p1;
wire   [17:0] p_Val2_11_fu_785_p2;
wire   [0:0] p_Result_14_fu_791_p3;
wire  signed [17:0] p_Val2_12_fu_769_p3;
wire  signed [17:0] p_Val2_13_fu_799_p3;
wire  signed [18:0] rhs_V_fu_811_p1;
wire  signed [18:0] lhs_V_fu_807_p1;
wire   [18:0] ret_V_fu_815_p2;
wire   [17:0] p_Val2_15_fu_829_p2;
wire   [0:0] p_Result_16_fu_835_p3;
wire   [0:0] p_Result_15_fu_821_p3;
wire   [0:0] xor_ln786_5_fu_843_p2;
wire   [0:0] xor_ln340_11_fu_861_p2;
wire   [0:0] xor_ln340_10_fu_855_p2;
wire   [0:0] underflow_fu_849_p2;
wire   [0:0] or_ln340_5_fu_867_p2;
wire   [17:0] select_ln340_12_fu_873_p3;
wire   [17:0] select_ln388_5_fu_881_p3;
wire  signed [18:0] lhs_V_1_fu_901_p1;
wire   [18:0] rhs_V_1_fu_904_p1;
wire   [18:0] ret_V_1_fu_908_p2;
wire   [17:0] p_Val2_17_fu_897_p1;
wire   [17:0] p_Val2_19_fu_922_p2;
wire   [0:0] p_Result_18_fu_927_p3;
wire   [0:0] p_Result_17_fu_914_p3;
wire   [0:0] xor_ln786_6_fu_935_p2;
wire   [0:0] xor_ln340_13_fu_953_p2;
wire   [0:0] xor_ln340_12_fu_947_p2;
wire   [9:0] tmp_10_fu_965_p4;
wire   [0:0] underflow_1_fu_941_p2;
wire   [0:0] or_ln340_6_fu_959_p2;
wire   [9:0] select_ln340_14_fu_975_p3;
wire   [9:0] select_ln388_6_fu_983_p3;
wire   [9:0] y_V_5_fu_991_p3;
wire  signed [25:0] mul_ln1118_fu_1073_p2;
wire  signed [25:0] mul_ln1118_1_fu_1080_p2;
wire  signed [25:0] mul_ln1118_2_fu_1087_p2;
wire  signed [25:0] mul_ln1118_3_fu_1094_p2;
wire  signed [25:0] mul_ln1118_4_fu_1101_p2;
wire  signed [17:0] mul_ln1118_fu_1073_p0;
wire  signed [25:0] sext_ln1116_fu_1004_p1;
wire   [16:0] mul_ln1118_fu_1073_p1;
wire  signed [17:0] mul_ln1118_1_fu_1080_p0;
wire   [16:0] mul_ln1118_1_fu_1080_p1;
wire  signed [17:0] mul_ln1118_2_fu_1087_p0;
wire   [16:0] mul_ln1118_2_fu_1087_p1;
wire  signed [17:0] mul_ln1118_3_fu_1094_p0;
wire   [16:0] mul_ln1118_3_fu_1094_p1;
wire  signed [17:0] mul_ln1118_4_fu_1101_p0;
wire   [16:0] mul_ln1118_4_fu_1101_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] mul_ln1118_1_fu_1080_p10;
wire   [25:0] mul_ln1118_2_fu_1087_p10;
wire   [25:0] mul_ln1118_3_fu_1094_p10;
wire   [25:0] mul_ln1118_4_fu_1101_p10;
wire   [25:0] mul_ln1118_fu_1073_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s_exp_table1 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4)
);

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s_invert_table2 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_mul_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_1_1_U8697(
    .din0(mul_ln1118_fu_1073_p0),
    .din1(mul_ln1118_fu_1073_p1),
    .dout(mul_ln1118_fu_1073_p2)
);

myproject_mul_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_1_1_U8698(
    .din0(mul_ln1118_1_fu_1080_p0),
    .din1(mul_ln1118_1_fu_1080_p1),
    .dout(mul_ln1118_1_fu_1080_p2)
);

myproject_mul_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_1_1_U8699(
    .din0(mul_ln1118_2_fu_1087_p0),
    .din1(mul_ln1118_2_fu_1087_p1),
    .dout(mul_ln1118_2_fu_1087_p2)
);

myproject_mul_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_1_1_U8700(
    .din0(mul_ln1118_3_fu_1094_p0),
    .din1(mul_ln1118_3_fu_1094_p1),
    .dout(mul_ln1118_3_fu_1094_p2)
);

myproject_mul_mul_18s_17ns_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_18s_17ns_26_1_1_U8701(
    .din0(mul_ln1118_4_fu_1101_p0),
    .din1(mul_ln1118_4_fu_1101_p1),
    .dout(mul_ln1118_4_fu_1101_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_res_0_V_reg_1153 <= exp_table1_q0;
        exp_res_1_V_reg_1158 <= exp_table1_q1;
        exp_res_2_V_reg_1163 <= exp_table1_q2;
        exp_res_3_V_reg_1168 <= exp_table1_q3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exp_res_0_V_reg_1153_pp0_iter3_reg <= exp_res_0_V_reg_1153;
        exp_res_1_V_reg_1158_pp0_iter3_reg <= exp_res_1_V_reg_1158;
        exp_res_2_V_reg_1163_pp0_iter3_reg <= exp_res_2_V_reg_1163;
        exp_res_3_V_reg_1168_pp0_iter3_reg <= exp_res_3_V_reg_1168;
        p_Val2_16_reg_1178 <= p_Val2_16_fu_889_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        exp_res_4_V_reg_1184 <= exp_table1_q4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_V_1_reg_1113 <= y_V_1_fu_617_p3;
        y_V_2_reg_1118 <= y_V_2_fu_651_p3;
        y_V_3_reg_1123 <= y_V_3_fu_685_p3;
        y_V_4_reg_1128 <= y_V_4_fu_719_p3;
        y_V_4_reg_1128_pp0_iter1_reg <= y_V_4_reg_1128;
        y_V_reg_1108 <= y_V_fu_583_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_3_V_ap_vld = 1'b1;
    end else begin
        res_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_4_V_ap_vld = 1'b1;
    end else begin
        res_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln786_1_fu_365_p2 = (xor_ln786_1_fu_359_p2 & tmp_385_fu_343_p3);

assign and_ln786_2_fu_421_p2 = (xor_ln786_2_fu_415_p2 & tmp_387_fu_399_p3);

assign and_ln786_3_fu_477_p2 = (xor_ln786_3_fu_471_p2 & tmp_389_fu_455_p3);

assign and_ln786_4_fu_533_p2 = (xor_ln786_4_fu_527_p2 & tmp_391_fu_511_p3);

assign and_ln786_fu_309_p2 = (xor_ln786_fu_303_p2 & tmp_383_fu_287_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_table1_address0 = zext_ln255_fu_727_p1;

assign exp_table1_address1 = zext_ln255_1_fu_731_p1;

assign exp_table1_address2 = zext_ln255_2_fu_735_p1;

assign exp_table1_address3 = zext_ln255_3_fu_739_p1;

assign exp_table1_address4 = zext_ln255_4_fu_743_p1;

assign icmp_ln1496_1_fu_231_p0 = data_2_V_read;

assign icmp_ln1496_1_fu_231_p1 = data_3_V_read;

assign icmp_ln1496_1_fu_231_p2 = (($signed(icmp_ln1496_1_fu_231_p0) < $signed(icmp_ln1496_1_fu_231_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_245_p2 = (($signed(select_ln65_fu_223_p3) < $signed(select_ln65_1_fu_237_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_259_p1 = data_4_V_read;

assign icmp_ln1496_3_fu_259_p2 = (($signed(select_ln65_2_fu_251_p3) < $signed(icmp_ln1496_3_fu_259_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_217_p0 = data_0_V_read;

assign icmp_ln1496_fu_217_p1 = data_1_V_read;

assign icmp_ln1496_fu_217_p2 = (($signed(icmp_ln1496_fu_217_p0) < $signed(icmp_ln1496_fu_217_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln265_fu_999_p1;

assign lhs_V_1_fu_901_p1 = p_Val2_16_reg_1178;

assign lhs_V_fu_807_p1 = p_Val2_12_fu_769_p3;

assign mul_ln1118_1_fu_1080_p0 = sext_ln1116_fu_1004_p1;

assign mul_ln1118_1_fu_1080_p1 = mul_ln1118_1_fu_1080_p10;

assign mul_ln1118_1_fu_1080_p10 = exp_res_1_V_reg_1158_pp0_iter3_reg;

assign mul_ln1118_2_fu_1087_p0 = sext_ln1116_fu_1004_p1;

assign mul_ln1118_2_fu_1087_p1 = mul_ln1118_2_fu_1087_p10;

assign mul_ln1118_2_fu_1087_p10 = exp_res_2_V_reg_1163_pp0_iter3_reg;

assign mul_ln1118_3_fu_1094_p0 = sext_ln1116_fu_1004_p1;

assign mul_ln1118_3_fu_1094_p1 = mul_ln1118_3_fu_1094_p10;

assign mul_ln1118_3_fu_1094_p10 = exp_res_3_V_reg_1168_pp0_iter3_reg;

assign mul_ln1118_4_fu_1101_p0 = sext_ln1116_fu_1004_p1;

assign mul_ln1118_4_fu_1101_p1 = mul_ln1118_4_fu_1101_p10;

assign mul_ln1118_4_fu_1101_p10 = exp_res_4_V_reg_1184;

assign mul_ln1118_fu_1073_p0 = sext_ln1116_fu_1004_p1;

assign mul_ln1118_fu_1073_p1 = mul_ln1118_fu_1073_p10;

assign mul_ln1118_fu_1073_p10 = exp_res_0_V_reg_1153_pp0_iter3_reg;

assign or_ln340_1_fu_383_p2 = (xor_ln340_1_fu_377_p2 | tmp_386_fu_351_p3);

assign or_ln340_2_fu_439_p2 = (xor_ln340_2_fu_433_p2 | tmp_388_fu_407_p3);

assign or_ln340_3_fu_495_p2 = (xor_ln340_3_fu_489_p2 | tmp_390_fu_463_p3);

assign or_ln340_4_fu_551_p2 = (xor_ln340_4_fu_545_p2 | tmp_392_fu_519_p3);

assign or_ln340_5_fu_867_p2 = (xor_ln340_11_fu_861_p2 | p_Result_16_fu_835_p3);

assign or_ln340_6_fu_959_p2 = (xor_ln340_13_fu_953_p2 | p_Result_18_fu_927_p3);

assign or_ln340_fu_327_p2 = (xor_ln340_fu_321_p2 | tmp_384_fu_295_p3);

assign p_Result_14_fu_791_p3 = p_Val2_11_fu_785_p2[32'd17];

assign p_Result_15_fu_821_p3 = ret_V_fu_815_p2[32'd18];

assign p_Result_16_fu_835_p3 = p_Val2_15_fu_829_p2[32'd17];

assign p_Result_17_fu_914_p3 = ret_V_1_fu_908_p2[32'd18];

assign p_Result_18_fu_927_p3 = p_Val2_19_fu_922_p2[32'd17];

assign p_Result_s_fu_761_p3 = p_Val2_8_fu_755_p2[32'd17];

assign p_Val2_10_fu_781_p1 = exp_table1_q3;

assign p_Val2_11_fu_785_p2 = (p_Val2_9_fu_777_p1 + p_Val2_10_fu_781_p1);

assign p_Val2_12_fu_769_p3 = ((p_Result_s_fu_761_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_8_fu_755_p2);

assign p_Val2_13_fu_799_p3 = ((p_Result_14_fu_791_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_11_fu_785_p2);

assign p_Val2_15_fu_829_p2 = ($signed(p_Val2_12_fu_769_p3) + $signed(p_Val2_13_fu_799_p3));

assign p_Val2_16_fu_889_p3 = ((or_ln340_5_fu_867_p2[0:0] === 1'b1) ? select_ln340_12_fu_873_p3 : select_ln388_5_fu_881_p3);

assign p_Val2_17_fu_897_p1 = exp_table1_q4;

assign p_Val2_19_fu_922_p2 = ($signed(p_Val2_17_fu_897_p1) + $signed(p_Val2_16_reg_1178));

assign p_Val2_6_fu_747_p1 = exp_table1_q0;

assign p_Val2_7_fu_751_p1 = exp_table1_q1;

assign p_Val2_8_fu_755_p2 = (p_Val2_6_fu_747_p1 + p_Val2_7_fu_751_p1);

assign p_Val2_9_fu_777_p1 = exp_table1_q2;

assign res_0_V = {{mul_ln1118_fu_1073_p2[25:10]}};

assign res_1_V = {{mul_ln1118_1_fu_1080_p2[25:10]}};

assign res_2_V = {{mul_ln1118_2_fu_1087_p2[25:10]}};

assign res_3_V = {{mul_ln1118_3_fu_1094_p2[25:10]}};

assign res_4_V = {{mul_ln1118_4_fu_1101_p2[25:10]}};

assign ret_V_1_fu_908_p2 = ($signed(lhs_V_1_fu_901_p1) + $signed(rhs_V_1_fu_904_p1));

assign ret_V_fu_815_p2 = ($signed(rhs_V_fu_811_p1) + $signed(lhs_V_fu_807_p1));

assign rhs_V_1_fu_904_p1 = exp_table1_q4;

assign rhs_V_fu_811_p1 = p_Val2_13_fu_799_p3;

assign select_ln340_12_fu_873_p3 = ((xor_ln340_10_fu_855_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_15_fu_829_p2);

assign select_ln340_14_fu_975_p3 = ((xor_ln340_12_fu_947_p2[0:0] === 1'b1) ? 10'd511 : tmp_10_fu_965_p4);

assign select_ln340_2_fu_601_p3 = ((xor_ln340_6_fu_371_p2[0:0] === 1'b1) ? 10'd511 : tmp_2_fu_591_p4);

assign select_ln340_4_fu_635_p3 = ((xor_ln340_7_fu_427_p2[0:0] === 1'b1) ? 10'd511 : tmp_4_fu_625_p4);

assign select_ln340_6_fu_669_p3 = ((xor_ln340_8_fu_483_p2[0:0] === 1'b1) ? 10'd511 : tmp_6_fu_659_p4);

assign select_ln340_8_fu_703_p3 = ((xor_ln340_9_fu_539_p2[0:0] === 1'b1) ? 10'd511 : tmp_8_fu_693_p4);

assign select_ln340_fu_567_p3 = ((xor_ln340_5_fu_315_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_557_p4);

assign select_ln388_1_fu_609_p3 = ((and_ln786_1_fu_365_p2[0:0] === 1'b1) ? 10'd512 : tmp_2_fu_591_p4);

assign select_ln388_2_fu_643_p3 = ((and_ln786_2_fu_421_p2[0:0] === 1'b1) ? 10'd512 : tmp_4_fu_625_p4);

assign select_ln388_3_fu_677_p3 = ((and_ln786_3_fu_477_p2[0:0] === 1'b1) ? 10'd512 : tmp_6_fu_659_p4);

assign select_ln388_4_fu_711_p3 = ((and_ln786_4_fu_533_p2[0:0] === 1'b1) ? 10'd512 : tmp_8_fu_693_p4);

assign select_ln388_5_fu_881_p3 = ((underflow_fu_849_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_15_fu_829_p2);

assign select_ln388_6_fu_983_p3 = ((underflow_1_fu_941_p2[0:0] === 1'b1) ? 10'd512 : tmp_10_fu_965_p4);

assign select_ln388_fu_575_p3 = ((and_ln786_fu_309_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_557_p4);

assign select_ln65_1_fu_237_p1 = data_3_V_read;

assign select_ln65_1_fu_237_p2 = data_2_V_read;

assign select_ln65_1_fu_237_p3 = ((icmp_ln1496_1_fu_231_p2[0:0] === 1'b1) ? select_ln65_1_fu_237_p1 : select_ln65_1_fu_237_p2);

assign select_ln65_2_fu_251_p3 = ((icmp_ln1496_2_fu_245_p2[0:0] === 1'b1) ? select_ln65_1_fu_237_p3 : select_ln65_fu_223_p3);

assign select_ln65_fu_223_p1 = data_1_V_read;

assign select_ln65_fu_223_p2 = data_0_V_read;

assign select_ln65_fu_223_p3 = ((icmp_ln1496_fu_217_p2[0:0] === 1'b1) ? select_ln65_fu_223_p1 : select_ln65_fu_223_p2);

assign sext_ln1116_fu_1004_p1 = $signed(invert_table2_q0);

assign sext_ln703_1_fu_277_p1 = $signed(x_max_V_fu_265_p3);

assign sext_ln703_2_fu_333_p0 = data_1_V_read;

assign sext_ln703_2_fu_333_p1 = sext_ln703_2_fu_333_p0;

assign sext_ln703_3_fu_389_p0 = data_2_V_read;

assign sext_ln703_3_fu_389_p1 = sext_ln703_3_fu_389_p0;

assign sext_ln703_4_fu_445_p0 = data_3_V_read;

assign sext_ln703_4_fu_445_p1 = sext_ln703_4_fu_445_p0;

assign sext_ln703_5_fu_501_p0 = data_4_V_read;

assign sext_ln703_5_fu_501_p1 = sext_ln703_5_fu_501_p0;

assign sext_ln703_fu_273_p0 = data_0_V_read;

assign sext_ln703_fu_273_p1 = sext_ln703_fu_273_p0;

assign sub_ln1193_1_fu_337_p2 = ($signed(sext_ln703_2_fu_333_p1) - $signed(sext_ln703_1_fu_277_p1));

assign sub_ln1193_2_fu_393_p2 = ($signed(sext_ln703_3_fu_389_p1) - $signed(sext_ln703_1_fu_277_p1));

assign sub_ln1193_3_fu_449_p2 = ($signed(sext_ln703_4_fu_445_p1) - $signed(sext_ln703_1_fu_277_p1));

assign sub_ln1193_4_fu_505_p2 = ($signed(sext_ln703_5_fu_501_p1) - $signed(sext_ln703_1_fu_277_p1));

assign sub_ln1193_fu_281_p2 = ($signed(sext_ln703_fu_273_p1) - $signed(sext_ln703_1_fu_277_p1));

assign tmp_10_fu_965_p4 = {{p_Val2_19_fu_922_p2[17:8]}};

assign tmp_2_fu_591_p4 = {{sub_ln1193_1_fu_337_p2[15:6]}};

assign tmp_383_fu_287_p3 = sub_ln1193_fu_281_p2[32'd16];

assign tmp_384_fu_295_p3 = sub_ln1193_fu_281_p2[32'd15];

assign tmp_385_fu_343_p3 = sub_ln1193_1_fu_337_p2[32'd16];

assign tmp_386_fu_351_p3 = sub_ln1193_1_fu_337_p2[32'd15];

assign tmp_387_fu_399_p3 = sub_ln1193_2_fu_393_p2[32'd16];

assign tmp_388_fu_407_p3 = sub_ln1193_2_fu_393_p2[32'd15];

assign tmp_389_fu_455_p3 = sub_ln1193_3_fu_449_p2[32'd16];

assign tmp_390_fu_463_p3 = sub_ln1193_3_fu_449_p2[32'd15];

assign tmp_391_fu_511_p3 = sub_ln1193_4_fu_505_p2[32'd16];

assign tmp_392_fu_519_p3 = sub_ln1193_4_fu_505_p2[32'd15];

assign tmp_4_fu_625_p4 = {{sub_ln1193_2_fu_393_p2[15:6]}};

assign tmp_6_fu_659_p4 = {{sub_ln1193_3_fu_449_p2[15:6]}};

assign tmp_8_fu_693_p4 = {{sub_ln1193_4_fu_505_p2[15:6]}};

assign tmp_fu_557_p4 = {{sub_ln1193_fu_281_p2[15:6]}};

assign underflow_1_fu_941_p2 = (xor_ln786_6_fu_935_p2 & p_Result_17_fu_914_p3);

assign underflow_fu_849_p2 = (xor_ln786_5_fu_843_p2 & p_Result_15_fu_821_p3);

assign x_max_V_fu_265_p1 = data_4_V_read;

assign x_max_V_fu_265_p3 = ((icmp_ln1496_3_fu_259_p2[0:0] === 1'b1) ? x_max_V_fu_265_p1 : select_ln65_2_fu_251_p3);

assign xor_ln340_10_fu_855_p2 = (p_Result_16_fu_835_p3 ^ p_Result_15_fu_821_p3);

assign xor_ln340_11_fu_861_p2 = (p_Result_15_fu_821_p3 ^ 1'd1);

assign xor_ln340_12_fu_947_p2 = (p_Result_18_fu_927_p3 ^ p_Result_17_fu_914_p3);

assign xor_ln340_13_fu_953_p2 = (p_Result_17_fu_914_p3 ^ 1'd1);

assign xor_ln340_1_fu_377_p2 = (tmp_385_fu_343_p3 ^ 1'd1);

assign xor_ln340_2_fu_433_p2 = (tmp_387_fu_399_p3 ^ 1'd1);

assign xor_ln340_3_fu_489_p2 = (tmp_389_fu_455_p3 ^ 1'd1);

assign xor_ln340_4_fu_545_p2 = (tmp_391_fu_511_p3 ^ 1'd1);

assign xor_ln340_5_fu_315_p2 = (tmp_384_fu_295_p3 ^ tmp_383_fu_287_p3);

assign xor_ln340_6_fu_371_p2 = (tmp_386_fu_351_p3 ^ tmp_385_fu_343_p3);

assign xor_ln340_7_fu_427_p2 = (tmp_388_fu_407_p3 ^ tmp_387_fu_399_p3);

assign xor_ln340_8_fu_483_p2 = (tmp_390_fu_463_p3 ^ tmp_389_fu_455_p3);

assign xor_ln340_9_fu_539_p2 = (tmp_392_fu_519_p3 ^ tmp_391_fu_511_p3);

assign xor_ln340_fu_321_p2 = (tmp_383_fu_287_p3 ^ 1'd1);

assign xor_ln786_1_fu_359_p2 = (tmp_386_fu_351_p3 ^ 1'd1);

assign xor_ln786_2_fu_415_p2 = (tmp_388_fu_407_p3 ^ 1'd1);

assign xor_ln786_3_fu_471_p2 = (tmp_390_fu_463_p3 ^ 1'd1);

assign xor_ln786_4_fu_527_p2 = (tmp_392_fu_519_p3 ^ 1'd1);

assign xor_ln786_5_fu_843_p2 = (p_Result_16_fu_835_p3 ^ 1'd1);

assign xor_ln786_6_fu_935_p2 = (p_Result_18_fu_927_p3 ^ 1'd1);

assign xor_ln786_fu_303_p2 = (tmp_384_fu_295_p3 ^ 1'd1);

assign y_V_1_fu_617_p3 = ((or_ln340_1_fu_383_p2[0:0] === 1'b1) ? select_ln340_2_fu_601_p3 : select_ln388_1_fu_609_p3);

assign y_V_2_fu_651_p3 = ((or_ln340_2_fu_439_p2[0:0] === 1'b1) ? select_ln340_4_fu_635_p3 : select_ln388_2_fu_643_p3);

assign y_V_3_fu_685_p3 = ((or_ln340_3_fu_495_p2[0:0] === 1'b1) ? select_ln340_6_fu_669_p3 : select_ln388_3_fu_677_p3);

assign y_V_4_fu_719_p3 = ((or_ln340_4_fu_551_p2[0:0] === 1'b1) ? select_ln340_8_fu_703_p3 : select_ln388_4_fu_711_p3);

assign y_V_5_fu_991_p3 = ((or_ln340_6_fu_959_p2[0:0] === 1'b1) ? select_ln340_14_fu_975_p3 : select_ln388_6_fu_983_p3);

assign y_V_fu_583_p3 = ((or_ln340_fu_327_p2[0:0] === 1'b1) ? select_ln340_fu_567_p3 : select_ln388_fu_575_p3);

assign zext_ln255_1_fu_731_p1 = y_V_1_reg_1113;

assign zext_ln255_2_fu_735_p1 = y_V_2_reg_1118;

assign zext_ln255_3_fu_739_p1 = y_V_3_reg_1123;

assign zext_ln255_4_fu_743_p1 = y_V_4_reg_1128_pp0_iter1_reg;

assign zext_ln255_fu_727_p1 = y_V_reg_1108;

assign zext_ln265_fu_999_p1 = y_V_5_fu_991_p3;

endmodule //softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s
