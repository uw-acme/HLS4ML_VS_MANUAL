-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_ap_fixed_ap_fixed_18_8_5_3_0_softmax_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    res_0_V : OUT STD_LOGIC_VECTOR (17 downto 0);
    res_0_V_ap_vld : OUT STD_LOGIC;
    res_1_V : OUT STD_LOGIC_VECTOR (17 downto 0);
    res_1_V_ap_vld : OUT STD_LOGIC;
    res_2_V : OUT STD_LOGIC_VECTOR (17 downto 0);
    res_2_V_ap_vld : OUT STD_LOGIC;
    res_3_V : OUT STD_LOGIC_VECTOR (17 downto 0);
    res_3_V_ap_vld : OUT STD_LOGIC;
    res_4_V : OUT STD_LOGIC_VECTOR (17 downto 0);
    res_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of softmax_stable_ap_fixed_ap_fixed_18_8_5_3_0_softmax_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_V_fu_575_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_reg_1100 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_609_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_reg_1105 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_643_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_reg_1110 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_677_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_reg_1115 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_fu_711_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_1120 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_1120_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_1145 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1145_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1150 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1150_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1155 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1155_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1160 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1160_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_16_fu_881_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_16_reg_1170 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_1176 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln255_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_1_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_3_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_4_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1496_fu_209_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1496_fu_209_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1496_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_215_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln65_fu_215_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1496_1_fu_223_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1496_1_fu_223_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1496_1_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_1_fu_229_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln65_1_fu_229_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln65_fu_215_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln65_1_fu_229_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1496_2_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_2_fu_243_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1496_3_fu_251_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln1496_3_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_257_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln703_fu_265_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_max_V_fu_257_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln703_fu_265_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln703_1_fu_269_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1193_fu_273_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_384_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_383_fu_279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_2_fu_325_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln703_2_fu_325_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1193_1_fu_329_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_386_fu_343_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_385_fu_335_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_3_fu_381_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln703_3_fu_381_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1193_2_fu_385_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_388_fu_399_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_387_fu_391_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_4_fu_437_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln703_4_fu_437_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1193_3_fu_441_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_390_fu_455_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_389_fu_447_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_5_fu_493_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln703_5_fu_493_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln1193_4_fu_497_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_392_fu_511_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_391_fu_503_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_549_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_559_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_567_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_6_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_583_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_1_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_593_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_601_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_7_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_617_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_2_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_627_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_635_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_8_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_651_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_3_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_661_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_669_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_9_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_685_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_4_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_695_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_4_fu_703_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_6_fu_739_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_fu_743_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_fu_747_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_753_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_769_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_10_fu_773_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_11_fu_777_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_14_fu_783_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_fu_761_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_13_fu_791_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_fu_803_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_fu_799_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_807_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_15_fu_821_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_16_fu_827_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_813_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_5_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_11_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_10_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_12_fu_865_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_5_fu_873_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_1_fu_893_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_1_fu_896_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_900_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_17_fu_889_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_19_fu_914_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_18_fu_919_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_906_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_6_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_13_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_12_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_957_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal underflow_1_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_14_fu_967_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_6_fu_975_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_fu_983_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_fu_1065_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_1_fu_1072_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_2_fu_1079_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_3_fu_1086_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_4_fu_1093_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_fu_1065_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1116_fu_996_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_fu_1065_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_1_fu_1072_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_1_fu_1072_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_2_fu_1079_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_2_fu_1079_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_3_fu_1086_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_3_fu_1086_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_4_fu_1093_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_4_fu_1093_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1118_1_fu_1072_p10 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_2_fu_1079_p10 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_3_fu_1086_p10 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_4_fu_1093_p10 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln1118_fu_1065_p10 : STD_LOGIC_VECTOR (27 downto 0);

    component myproject_mul_mul_18s_17ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_18_8_5_3_0_softmax_config8_s_exp_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_18_8_5_3_0_softmax_config8_s_invert_table2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_stable_ap_fixed_ap_fixed_18_8_5_3_0_softmax_config8_s_exp_table1
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4);

    invert_table2_U : component softmax_stable_ap_fixed_ap_fixed_18_8_5_3_0_softmax_config8_s_invert_table2
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    myproject_mul_mul_18s_17ns_28_1_1_U8697 : component myproject_mul_mul_18s_17ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_fu_1065_p0,
        din1 => mul_ln1118_fu_1065_p1,
        dout => mul_ln1118_fu_1065_p2);

    myproject_mul_mul_18s_17ns_28_1_1_U8698 : component myproject_mul_mul_18s_17ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_1_fu_1072_p0,
        din1 => mul_ln1118_1_fu_1072_p1,
        dout => mul_ln1118_1_fu_1072_p2);

    myproject_mul_mul_18s_17ns_28_1_1_U8699 : component myproject_mul_mul_18s_17ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_2_fu_1079_p0,
        din1 => mul_ln1118_2_fu_1079_p1,
        dout => mul_ln1118_2_fu_1079_p2);

    myproject_mul_mul_18s_17ns_28_1_1_U8700 : component myproject_mul_mul_18s_17ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_3_fu_1086_p0,
        din1 => mul_ln1118_3_fu_1086_p1,
        dout => mul_ln1118_3_fu_1086_p2);

    myproject_mul_mul_18s_17ns_28_1_1_U8701 : component myproject_mul_mul_18s_17ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln1118_4_fu_1093_p0,
        din1 => mul_ln1118_4_fu_1093_p1,
        dout => mul_ln1118_4_fu_1093_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                exp_res_0_V_reg_1145 <= exp_table1_q0;
                exp_res_1_V_reg_1150 <= exp_table1_q1;
                exp_res_2_V_reg_1155 <= exp_table1_q2;
                exp_res_3_V_reg_1160 <= exp_table1_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_res_0_V_reg_1145_pp0_iter3_reg <= exp_res_0_V_reg_1145;
                exp_res_1_V_reg_1150_pp0_iter3_reg <= exp_res_1_V_reg_1150;
                exp_res_2_V_reg_1155_pp0_iter3_reg <= exp_res_2_V_reg_1155;
                exp_res_3_V_reg_1160_pp0_iter3_reg <= exp_res_3_V_reg_1160;
                p_Val2_16_reg_1170 <= p_Val2_16_fu_881_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                exp_res_4_V_reg_1176 <= exp_table1_q4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                y_V_1_reg_1105 <= y_V_1_fu_609_p3;
                y_V_2_reg_1110 <= y_V_2_fu_643_p3;
                y_V_3_reg_1115 <= y_V_3_fu_677_p3;
                y_V_4_reg_1120 <= y_V_4_fu_711_p3;
                y_V_4_reg_1120_pp0_iter1_reg <= y_V_4_reg_1120;
                y_V_reg_1100 <= y_V_fu_575_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln786_1_fu_357_p2 <= (xor_ln786_1_fu_351_p2 and tmp_385_fu_335_p3);
    and_ln786_2_fu_413_p2 <= (xor_ln786_2_fu_407_p2 and tmp_387_fu_391_p3);
    and_ln786_3_fu_469_p2 <= (xor_ln786_3_fu_463_p2 and tmp_389_fu_447_p3);
    and_ln786_4_fu_525_p2 <= (xor_ln786_4_fu_519_p2 and tmp_391_fu_503_p3);
    and_ln786_fu_301_p2 <= (xor_ln786_fu_295_p2 and tmp_383_fu_279_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_table1_address0 <= zext_ln255_fu_719_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln255_1_fu_723_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln255_2_fu_727_p1(10 - 1 downto 0);
    exp_table1_address3 <= zext_ln255_3_fu_731_p1(10 - 1 downto 0);
    exp_table1_address4 <= zext_ln255_4_fu_735_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_1_fu_223_p0 <= data_2_V_read;
    icmp_ln1496_1_fu_223_p1 <= data_3_V_read;
    icmp_ln1496_1_fu_223_p2 <= "1" when (signed(icmp_ln1496_1_fu_223_p0) < signed(icmp_ln1496_1_fu_223_p1)) else "0";
    icmp_ln1496_2_fu_237_p2 <= "1" when (signed(select_ln65_fu_215_p3) < signed(select_ln65_1_fu_229_p3)) else "0";
    icmp_ln1496_3_fu_251_p1 <= data_4_V_read;
    icmp_ln1496_3_fu_251_p2 <= "1" when (signed(select_ln65_2_fu_243_p3) < signed(icmp_ln1496_3_fu_251_p1)) else "0";
    icmp_ln1496_fu_209_p0 <= data_0_V_read;
    icmp_ln1496_fu_209_p1 <= data_1_V_read;
    icmp_ln1496_fu_209_p2 <= "1" when (signed(icmp_ln1496_fu_209_p0) < signed(icmp_ln1496_fu_209_p1)) else "0";
    invert_table2_address0 <= zext_ln265_fu_991_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_1_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_16_reg_1170),19));

        lhs_V_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_12_fu_761_p3),19));

    mul_ln1118_1_fu_1072_p0 <= sext_ln1116_fu_996_p1(18 - 1 downto 0);
    mul_ln1118_1_fu_1072_p1 <= mul_ln1118_1_fu_1072_p10(17 - 1 downto 0);
    mul_ln1118_1_fu_1072_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_1150_pp0_iter3_reg),28));
    mul_ln1118_2_fu_1079_p0 <= sext_ln1116_fu_996_p1(18 - 1 downto 0);
    mul_ln1118_2_fu_1079_p1 <= mul_ln1118_2_fu_1079_p10(17 - 1 downto 0);
    mul_ln1118_2_fu_1079_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_1155_pp0_iter3_reg),28));
    mul_ln1118_3_fu_1086_p0 <= sext_ln1116_fu_996_p1(18 - 1 downto 0);
    mul_ln1118_3_fu_1086_p1 <= mul_ln1118_3_fu_1086_p10(17 - 1 downto 0);
    mul_ln1118_3_fu_1086_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_1160_pp0_iter3_reg),28));
    mul_ln1118_4_fu_1093_p0 <= sext_ln1116_fu_996_p1(18 - 1 downto 0);
    mul_ln1118_4_fu_1093_p1 <= mul_ln1118_4_fu_1093_p10(17 - 1 downto 0);
    mul_ln1118_4_fu_1093_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_1176),28));
    mul_ln1118_fu_1065_p0 <= sext_ln1116_fu_996_p1(18 - 1 downto 0);
    mul_ln1118_fu_1065_p1 <= mul_ln1118_fu_1065_p10(17 - 1 downto 0);
    mul_ln1118_fu_1065_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_1145_pp0_iter3_reg),28));
    or_ln340_1_fu_375_p2 <= (xor_ln340_1_fu_369_p2 or tmp_386_fu_343_p3);
    or_ln340_2_fu_431_p2 <= (xor_ln340_2_fu_425_p2 or tmp_388_fu_399_p3);
    or_ln340_3_fu_487_p2 <= (xor_ln340_3_fu_481_p2 or tmp_390_fu_455_p3);
    or_ln340_4_fu_543_p2 <= (xor_ln340_4_fu_537_p2 or tmp_392_fu_511_p3);
    or_ln340_5_fu_859_p2 <= (xor_ln340_11_fu_853_p2 or p_Result_16_fu_827_p3);
    or_ln340_6_fu_951_p2 <= (xor_ln340_13_fu_945_p2 or p_Result_18_fu_919_p3);
    or_ln340_fu_319_p2 <= (xor_ln340_fu_313_p2 or tmp_384_fu_287_p3);
    p_Result_14_fu_783_p3 <= p_Val2_11_fu_777_p2(17 downto 17);
    p_Result_15_fu_813_p3 <= ret_V_fu_807_p2(18 downto 18);
    p_Result_16_fu_827_p3 <= p_Val2_15_fu_821_p2(17 downto 17);
    p_Result_17_fu_906_p3 <= ret_V_1_fu_900_p2(18 downto 18);
    p_Result_18_fu_919_p3 <= p_Val2_19_fu_914_p2(17 downto 17);
    p_Result_s_fu_753_p3 <= p_Val2_8_fu_747_p2(17 downto 17);
    p_Val2_10_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q3),18));
    p_Val2_11_fu_777_p2 <= std_logic_vector(unsigned(p_Val2_9_fu_769_p1) + unsigned(p_Val2_10_fu_773_p1));
    p_Val2_12_fu_761_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_s_fu_753_p3(0) = '1') else 
        p_Val2_8_fu_747_p2;
    p_Val2_13_fu_791_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_14_fu_783_p3(0) = '1') else 
        p_Val2_11_fu_777_p2;
    p_Val2_15_fu_821_p2 <= std_logic_vector(signed(p_Val2_12_fu_761_p3) + signed(p_Val2_13_fu_791_p3));
    p_Val2_16_fu_881_p3 <= 
        select_ln340_12_fu_865_p3 when (or_ln340_5_fu_859_p2(0) = '1') else 
        select_ln388_5_fu_873_p3;
    p_Val2_17_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q4),18));
    p_Val2_19_fu_914_p2 <= std_logic_vector(unsigned(p_Val2_17_fu_889_p1) + unsigned(p_Val2_16_reg_1170));
    p_Val2_6_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q0),18));
    p_Val2_7_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q1),18));
    p_Val2_8_fu_747_p2 <= std_logic_vector(unsigned(p_Val2_6_fu_739_p1) + unsigned(p_Val2_7_fu_743_p1));
    p_Val2_9_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q2),18));
    res_0_V <= mul_ln1118_fu_1065_p2(27 downto 10);

    res_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_0_V_ap_vld <= ap_const_logic_1;
        else 
            res_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V <= mul_ln1118_1_fu_1072_p2(27 downto 10);

    res_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_1_V_ap_vld <= ap_const_logic_1;
        else 
            res_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V <= mul_ln1118_2_fu_1079_p2(27 downto 10);

    res_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_2_V_ap_vld <= ap_const_logic_1;
        else 
            res_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V <= mul_ln1118_3_fu_1086_p2(27 downto 10);

    res_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_3_V_ap_vld <= ap_const_logic_1;
        else 
            res_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V <= mul_ln1118_4_fu_1093_p2(27 downto 10);

    res_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            res_4_V_ap_vld <= ap_const_logic_1;
        else 
            res_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_900_p2 <= std_logic_vector(signed(lhs_V_1_fu_893_p1) + signed(rhs_V_1_fu_896_p1));
    ret_V_fu_807_p2 <= std_logic_vector(signed(rhs_V_fu_803_p1) + signed(lhs_V_fu_799_p1));
    rhs_V_1_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q4),19));
        rhs_V_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_fu_791_p3),19));

    select_ln340_12_fu_865_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_10_fu_847_p2(0) = '1') else 
        p_Val2_15_fu_821_p2;
    select_ln340_14_fu_967_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_12_fu_939_p2(0) = '1') else 
        tmp_10_fu_957_p4;
    select_ln340_2_fu_593_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_6_fu_363_p2(0) = '1') else 
        tmp_2_fu_583_p4;
    select_ln340_4_fu_627_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_7_fu_419_p2(0) = '1') else 
        tmp_4_fu_617_p4;
    select_ln340_6_fu_661_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_8_fu_475_p2(0) = '1') else 
        tmp_6_fu_651_p4;
    select_ln340_8_fu_695_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_9_fu_531_p2(0) = '1') else 
        tmp_8_fu_685_p4;
    select_ln340_fu_559_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_5_fu_307_p2(0) = '1') else 
        tmp_fu_549_p4;
    select_ln388_1_fu_601_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_357_p2(0) = '1') else 
        tmp_2_fu_583_p4;
    select_ln388_2_fu_635_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_413_p2(0) = '1') else 
        tmp_4_fu_617_p4;
    select_ln388_3_fu_669_p3 <= 
        ap_const_lv10_200 when (and_ln786_3_fu_469_p2(0) = '1') else 
        tmp_6_fu_651_p4;
    select_ln388_4_fu_703_p3 <= 
        ap_const_lv10_200 when (and_ln786_4_fu_525_p2(0) = '1') else 
        tmp_8_fu_685_p4;
    select_ln388_5_fu_873_p3 <= 
        ap_const_lv18_20000 when (underflow_fu_841_p2(0) = '1') else 
        p_Val2_15_fu_821_p2;
    select_ln388_6_fu_975_p3 <= 
        ap_const_lv10_200 when (underflow_1_fu_933_p2(0) = '1') else 
        tmp_10_fu_957_p4;
    select_ln388_fu_567_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_301_p2(0) = '1') else 
        tmp_fu_549_p4;
    select_ln65_1_fu_229_p1 <= data_3_V_read;
    select_ln65_1_fu_229_p2 <= data_2_V_read;
    select_ln65_1_fu_229_p3 <= 
        select_ln65_1_fu_229_p1 when (icmp_ln1496_1_fu_223_p2(0) = '1') else 
        select_ln65_1_fu_229_p2;
    select_ln65_2_fu_243_p3 <= 
        select_ln65_1_fu_229_p3 when (icmp_ln1496_2_fu_237_p2(0) = '1') else 
        select_ln65_fu_215_p3;
    select_ln65_fu_215_p1 <= data_1_V_read;
    select_ln65_fu_215_p2 <= data_0_V_read;
    select_ln65_fu_215_p3 <= 
        select_ln65_fu_215_p1 when (icmp_ln1496_fu_209_p2(0) = '1') else 
        select_ln65_fu_215_p2;
        sext_ln1116_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table2_q0),28));

        sext_ln703_1_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_257_p3),19));

    sext_ln703_2_fu_325_p0 <= data_1_V_read;
        sext_ln703_2_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2_fu_325_p0),19));

    sext_ln703_3_fu_381_p0 <= data_2_V_read;
        sext_ln703_3_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_3_fu_381_p0),19));

    sext_ln703_4_fu_437_p0 <= data_3_V_read;
        sext_ln703_4_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_4_fu_437_p0),19));

    sext_ln703_5_fu_493_p0 <= data_4_V_read;
        sext_ln703_5_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_5_fu_493_p0),19));

    sext_ln703_fu_265_p0 <= data_0_V_read;
        sext_ln703_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_265_p0),19));

    sub_ln1193_1_fu_329_p2 <= std_logic_vector(signed(sext_ln703_2_fu_325_p1) - signed(sext_ln703_1_fu_269_p1));
    sub_ln1193_2_fu_385_p2 <= std_logic_vector(signed(sext_ln703_3_fu_381_p1) - signed(sext_ln703_1_fu_269_p1));
    sub_ln1193_3_fu_441_p2 <= std_logic_vector(signed(sext_ln703_4_fu_437_p1) - signed(sext_ln703_1_fu_269_p1));
    sub_ln1193_4_fu_497_p2 <= std_logic_vector(signed(sext_ln703_5_fu_493_p1) - signed(sext_ln703_1_fu_269_p1));
    sub_ln1193_fu_273_p2 <= std_logic_vector(signed(sext_ln703_fu_265_p1) - signed(sext_ln703_1_fu_269_p1));
    tmp_10_fu_957_p4 <= p_Val2_19_fu_914_p2(17 downto 8);
    tmp_2_fu_583_p4 <= sub_ln1193_1_fu_329_p2(17 downto 8);
    tmp_383_fu_279_p3 <= sub_ln1193_fu_273_p2(18 downto 18);
    tmp_384_fu_287_p3 <= sub_ln1193_fu_273_p2(17 downto 17);
    tmp_385_fu_335_p3 <= sub_ln1193_1_fu_329_p2(18 downto 18);
    tmp_386_fu_343_p3 <= sub_ln1193_1_fu_329_p2(17 downto 17);
    tmp_387_fu_391_p3 <= sub_ln1193_2_fu_385_p2(18 downto 18);
    tmp_388_fu_399_p3 <= sub_ln1193_2_fu_385_p2(17 downto 17);
    tmp_389_fu_447_p3 <= sub_ln1193_3_fu_441_p2(18 downto 18);
    tmp_390_fu_455_p3 <= sub_ln1193_3_fu_441_p2(17 downto 17);
    tmp_391_fu_503_p3 <= sub_ln1193_4_fu_497_p2(18 downto 18);
    tmp_392_fu_511_p3 <= sub_ln1193_4_fu_497_p2(17 downto 17);
    tmp_4_fu_617_p4 <= sub_ln1193_2_fu_385_p2(17 downto 8);
    tmp_6_fu_651_p4 <= sub_ln1193_3_fu_441_p2(17 downto 8);
    tmp_8_fu_685_p4 <= sub_ln1193_4_fu_497_p2(17 downto 8);
    tmp_fu_549_p4 <= sub_ln1193_fu_273_p2(17 downto 8);
    underflow_1_fu_933_p2 <= (xor_ln786_6_fu_927_p2 and p_Result_17_fu_906_p3);
    underflow_fu_841_p2 <= (xor_ln786_5_fu_835_p2 and p_Result_15_fu_813_p3);
    x_max_V_fu_257_p1 <= data_4_V_read;
    x_max_V_fu_257_p3 <= 
        x_max_V_fu_257_p1 when (icmp_ln1496_3_fu_251_p2(0) = '1') else 
        select_ln65_2_fu_243_p3;
    xor_ln340_10_fu_847_p2 <= (p_Result_16_fu_827_p3 xor p_Result_15_fu_813_p3);
    xor_ln340_11_fu_853_p2 <= (p_Result_15_fu_813_p3 xor ap_const_lv1_1);
    xor_ln340_12_fu_939_p2 <= (p_Result_18_fu_919_p3 xor p_Result_17_fu_906_p3);
    xor_ln340_13_fu_945_p2 <= (p_Result_17_fu_906_p3 xor ap_const_lv1_1);
    xor_ln340_1_fu_369_p2 <= (tmp_385_fu_335_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_425_p2 <= (tmp_387_fu_391_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_481_p2 <= (tmp_389_fu_447_p3 xor ap_const_lv1_1);
    xor_ln340_4_fu_537_p2 <= (tmp_391_fu_503_p3 xor ap_const_lv1_1);
    xor_ln340_5_fu_307_p2 <= (tmp_384_fu_287_p3 xor tmp_383_fu_279_p3);
    xor_ln340_6_fu_363_p2 <= (tmp_386_fu_343_p3 xor tmp_385_fu_335_p3);
    xor_ln340_7_fu_419_p2 <= (tmp_388_fu_399_p3 xor tmp_387_fu_391_p3);
    xor_ln340_8_fu_475_p2 <= (tmp_390_fu_455_p3 xor tmp_389_fu_447_p3);
    xor_ln340_9_fu_531_p2 <= (tmp_392_fu_511_p3 xor tmp_391_fu_503_p3);
    xor_ln340_fu_313_p2 <= (tmp_383_fu_279_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_351_p2 <= (tmp_386_fu_343_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_407_p2 <= (tmp_388_fu_399_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_463_p2 <= (tmp_390_fu_455_p3 xor ap_const_lv1_1);
    xor_ln786_4_fu_519_p2 <= (tmp_392_fu_511_p3 xor ap_const_lv1_1);
    xor_ln786_5_fu_835_p2 <= (p_Result_16_fu_827_p3 xor ap_const_lv1_1);
    xor_ln786_6_fu_927_p2 <= (p_Result_18_fu_919_p3 xor ap_const_lv1_1);
    xor_ln786_fu_295_p2 <= (tmp_384_fu_287_p3 xor ap_const_lv1_1);
    y_V_1_fu_609_p3 <= 
        select_ln340_2_fu_593_p3 when (or_ln340_1_fu_375_p2(0) = '1') else 
        select_ln388_1_fu_601_p3;
    y_V_2_fu_643_p3 <= 
        select_ln340_4_fu_627_p3 when (or_ln340_2_fu_431_p2(0) = '1') else 
        select_ln388_2_fu_635_p3;
    y_V_3_fu_677_p3 <= 
        select_ln340_6_fu_661_p3 when (or_ln340_3_fu_487_p2(0) = '1') else 
        select_ln388_3_fu_669_p3;
    y_V_4_fu_711_p3 <= 
        select_ln340_8_fu_695_p3 when (or_ln340_4_fu_543_p2(0) = '1') else 
        select_ln388_4_fu_703_p3;
    y_V_5_fu_983_p3 <= 
        select_ln340_14_fu_967_p3 when (or_ln340_6_fu_951_p2(0) = '1') else 
        select_ln388_6_fu_975_p3;
    y_V_fu_575_p3 <= 
        select_ln340_fu_559_p3 when (or_ln340_fu_319_p2(0) = '1') else 
        select_ln388_fu_567_p3;
    zext_ln255_1_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_reg_1105),64));
    zext_ln255_2_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_reg_1110),64));
    zext_ln255_3_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_reg_1115),64));
    zext_ln255_4_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_reg_1120_pp0_iter1_reg),64));
    zext_ln255_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_1100),64));
    zext_ln265_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_fu_983_p3),64));
end behav;
