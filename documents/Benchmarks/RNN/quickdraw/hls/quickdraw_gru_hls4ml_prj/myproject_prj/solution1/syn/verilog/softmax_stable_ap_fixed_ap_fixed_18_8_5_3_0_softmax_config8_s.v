// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_ap_fixed_ap_fixed_18_8_5_3_0_softmax_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld,
        res_3_V,
        res_3_V_ap_vld,
        res_4_V,
        res_4_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [17:0] data_0_V_read;
input  [17:0] data_1_V_read;
input  [17:0] data_2_V_read;
input  [17:0] data_3_V_read;
input  [17:0] data_4_V_read;
output  [17:0] res_0_V;
output   res_0_V_ap_vld;
output  [17:0] res_1_V;
output   res_1_V_ap_vld;
output  [17:0] res_2_V;
output   res_2_V_ap_vld;
output  [17:0] res_3_V;
output   res_3_V_ap_vld;
output  [17:0] res_4_V;
output   res_4_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_0_V_ap_vld;
reg res_1_V_ap_vld;
reg res_2_V_ap_vld;
reg res_3_V_ap_vld;
reg res_4_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [16:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [16:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [16:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [16:0] exp_table1_q4;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
wire   [9:0] y_V_fu_575_p3;
reg   [9:0] y_V_reg_1100;
wire   [9:0] y_V_1_fu_609_p3;
reg   [9:0] y_V_1_reg_1105;
wire   [9:0] y_V_2_fu_643_p3;
reg   [9:0] y_V_2_reg_1110;
wire   [9:0] y_V_3_fu_677_p3;
reg   [9:0] y_V_3_reg_1115;
wire   [9:0] y_V_4_fu_711_p3;
reg   [9:0] y_V_4_reg_1120;
reg   [9:0] y_V_4_reg_1120_pp0_iter1_reg;
reg   [16:0] exp_res_0_V_reg_1145;
reg   [16:0] exp_res_0_V_reg_1145_pp0_iter3_reg;
reg   [16:0] exp_res_1_V_reg_1150;
reg   [16:0] exp_res_1_V_reg_1150_pp0_iter3_reg;
reg   [16:0] exp_res_2_V_reg_1155;
reg   [16:0] exp_res_2_V_reg_1155_pp0_iter3_reg;
reg   [16:0] exp_res_3_V_reg_1160;
reg   [16:0] exp_res_3_V_reg_1160_pp0_iter3_reg;
wire  signed [17:0] p_Val2_16_fu_881_p3;
reg  signed [17:0] p_Val2_16_reg_1170;
reg   [16:0] exp_res_4_V_reg_1176;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln255_fu_719_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln255_1_fu_723_p1;
wire   [63:0] zext_ln255_2_fu_727_p1;
wire   [63:0] zext_ln255_3_fu_731_p1;
wire   [63:0] zext_ln255_4_fu_735_p1;
wire   [63:0] zext_ln265_fu_991_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [17:0] icmp_ln1496_fu_209_p0;
wire  signed [17:0] icmp_ln1496_fu_209_p1;
wire   [0:0] icmp_ln1496_fu_209_p2;
wire  signed [17:0] select_ln65_fu_215_p1;
wire  signed [17:0] select_ln65_fu_215_p2;
wire  signed [17:0] icmp_ln1496_1_fu_223_p0;
wire  signed [17:0] icmp_ln1496_1_fu_223_p1;
wire   [0:0] icmp_ln1496_1_fu_223_p2;
wire  signed [17:0] select_ln65_1_fu_229_p1;
wire  signed [17:0] select_ln65_1_fu_229_p2;
wire   [17:0] select_ln65_fu_215_p3;
wire   [17:0] select_ln65_1_fu_229_p3;
wire   [0:0] icmp_ln1496_2_fu_237_p2;
wire   [17:0] select_ln65_2_fu_243_p3;
wire  signed [17:0] icmp_ln1496_3_fu_251_p1;
wire   [0:0] icmp_ln1496_3_fu_251_p2;
wire  signed [17:0] x_max_V_fu_257_p1;
wire  signed [17:0] sext_ln703_fu_265_p0;
wire   [17:0] x_max_V_fu_257_p3;
wire  signed [18:0] sext_ln703_fu_265_p1;
wire  signed [18:0] sext_ln703_1_fu_269_p1;
wire   [18:0] sub_ln1193_fu_273_p2;
wire   [0:0] tmp_384_fu_287_p3;
wire   [0:0] tmp_383_fu_279_p3;
wire   [0:0] xor_ln786_fu_295_p2;
wire   [0:0] xor_ln340_fu_313_p2;
wire  signed [17:0] sext_ln703_2_fu_325_p0;
wire  signed [18:0] sext_ln703_2_fu_325_p1;
wire   [18:0] sub_ln1193_1_fu_329_p2;
wire   [0:0] tmp_386_fu_343_p3;
wire   [0:0] tmp_385_fu_335_p3;
wire   [0:0] xor_ln786_1_fu_351_p2;
wire   [0:0] xor_ln340_1_fu_369_p2;
wire  signed [17:0] sext_ln703_3_fu_381_p0;
wire  signed [18:0] sext_ln703_3_fu_381_p1;
wire   [18:0] sub_ln1193_2_fu_385_p2;
wire   [0:0] tmp_388_fu_399_p3;
wire   [0:0] tmp_387_fu_391_p3;
wire   [0:0] xor_ln786_2_fu_407_p2;
wire   [0:0] xor_ln340_2_fu_425_p2;
wire  signed [17:0] sext_ln703_4_fu_437_p0;
wire  signed [18:0] sext_ln703_4_fu_437_p1;
wire   [18:0] sub_ln1193_3_fu_441_p2;
wire   [0:0] tmp_390_fu_455_p3;
wire   [0:0] tmp_389_fu_447_p3;
wire   [0:0] xor_ln786_3_fu_463_p2;
wire   [0:0] xor_ln340_3_fu_481_p2;
wire  signed [17:0] sext_ln703_5_fu_493_p0;
wire  signed [18:0] sext_ln703_5_fu_493_p1;
wire   [18:0] sub_ln1193_4_fu_497_p2;
wire   [0:0] tmp_392_fu_511_p3;
wire   [0:0] tmp_391_fu_503_p3;
wire   [0:0] xor_ln786_4_fu_519_p2;
wire   [0:0] xor_ln340_4_fu_537_p2;
wire   [0:0] xor_ln340_5_fu_307_p2;
wire   [9:0] tmp_fu_549_p4;
wire   [0:0] and_ln786_fu_301_p2;
wire   [0:0] or_ln340_fu_319_p2;
wire   [9:0] select_ln340_fu_559_p3;
wire   [9:0] select_ln388_fu_567_p3;
wire   [0:0] xor_ln340_6_fu_363_p2;
wire   [9:0] tmp_2_fu_583_p4;
wire   [0:0] and_ln786_1_fu_357_p2;
wire   [0:0] or_ln340_1_fu_375_p2;
wire   [9:0] select_ln340_2_fu_593_p3;
wire   [9:0] select_ln388_1_fu_601_p3;
wire   [0:0] xor_ln340_7_fu_419_p2;
wire   [9:0] tmp_4_fu_617_p4;
wire   [0:0] and_ln786_2_fu_413_p2;
wire   [0:0] or_ln340_2_fu_431_p2;
wire   [9:0] select_ln340_4_fu_627_p3;
wire   [9:0] select_ln388_2_fu_635_p3;
wire   [0:0] xor_ln340_8_fu_475_p2;
wire   [9:0] tmp_6_fu_651_p4;
wire   [0:0] and_ln786_3_fu_469_p2;
wire   [0:0] or_ln340_3_fu_487_p2;
wire   [9:0] select_ln340_6_fu_661_p3;
wire   [9:0] select_ln388_3_fu_669_p3;
wire   [0:0] xor_ln340_9_fu_531_p2;
wire   [9:0] tmp_8_fu_685_p4;
wire   [0:0] and_ln786_4_fu_525_p2;
wire   [0:0] or_ln340_4_fu_543_p2;
wire   [9:0] select_ln340_8_fu_695_p3;
wire   [9:0] select_ln388_4_fu_703_p3;
wire   [17:0] p_Val2_6_fu_739_p1;
wire   [17:0] p_Val2_7_fu_743_p1;
wire   [17:0] p_Val2_8_fu_747_p2;
wire   [0:0] p_Result_s_fu_753_p3;
wire   [17:0] p_Val2_9_fu_769_p1;
wire   [17:0] p_Val2_10_fu_773_p1;
wire   [17:0] p_Val2_11_fu_777_p2;
wire   [0:0] p_Result_14_fu_783_p3;
wire  signed [17:0] p_Val2_12_fu_761_p3;
wire  signed [17:0] p_Val2_13_fu_791_p3;
wire  signed [18:0] rhs_V_fu_803_p1;
wire  signed [18:0] lhs_V_fu_799_p1;
wire   [18:0] ret_V_fu_807_p2;
wire   [17:0] p_Val2_15_fu_821_p2;
wire   [0:0] p_Result_16_fu_827_p3;
wire   [0:0] p_Result_15_fu_813_p3;
wire   [0:0] xor_ln786_5_fu_835_p2;
wire   [0:0] xor_ln340_11_fu_853_p2;
wire   [0:0] xor_ln340_10_fu_847_p2;
wire   [0:0] underflow_fu_841_p2;
wire   [0:0] or_ln340_5_fu_859_p2;
wire   [17:0] select_ln340_12_fu_865_p3;
wire   [17:0] select_ln388_5_fu_873_p3;
wire  signed [18:0] lhs_V_1_fu_893_p1;
wire   [18:0] rhs_V_1_fu_896_p1;
wire   [18:0] ret_V_1_fu_900_p2;
wire   [17:0] p_Val2_17_fu_889_p1;
wire   [17:0] p_Val2_19_fu_914_p2;
wire   [0:0] p_Result_18_fu_919_p3;
wire   [0:0] p_Result_17_fu_906_p3;
wire   [0:0] xor_ln786_6_fu_927_p2;
wire   [0:0] xor_ln340_13_fu_945_p2;
wire   [0:0] xor_ln340_12_fu_939_p2;
wire   [9:0] tmp_10_fu_957_p4;
wire   [0:0] underflow_1_fu_933_p2;
wire   [0:0] or_ln340_6_fu_951_p2;
wire   [9:0] select_ln340_14_fu_967_p3;
wire   [9:0] select_ln388_6_fu_975_p3;
wire   [9:0] y_V_5_fu_983_p3;
wire  signed [27:0] mul_ln1118_fu_1065_p2;
wire  signed [27:0] mul_ln1118_1_fu_1072_p2;
wire  signed [27:0] mul_ln1118_2_fu_1079_p2;
wire  signed [27:0] mul_ln1118_3_fu_1086_p2;
wire  signed [27:0] mul_ln1118_4_fu_1093_p2;
wire  signed [17:0] mul_ln1118_fu_1065_p0;
wire  signed [27:0] sext_ln1116_fu_996_p1;
wire   [16:0] mul_ln1118_fu_1065_p1;
wire  signed [17:0] mul_ln1118_1_fu_1072_p0;
wire   [16:0] mul_ln1118_1_fu_1072_p1;
wire  signed [17:0] mul_ln1118_2_fu_1079_p0;
wire   [16:0] mul_ln1118_2_fu_1079_p1;
wire  signed [17:0] mul_ln1118_3_fu_1086_p0;
wire   [16:0] mul_ln1118_3_fu_1086_p1;
wire  signed [17:0] mul_ln1118_4_fu_1093_p0;
wire   [16:0] mul_ln1118_4_fu_1093_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [27:0] mul_ln1118_1_fu_1072_p10;
wire   [27:0] mul_ln1118_2_fu_1079_p10;
wire   [27:0] mul_ln1118_3_fu_1086_p10;
wire   [27:0] mul_ln1118_4_fu_1093_p10;
wire   [27:0] mul_ln1118_fu_1065_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

softmax_stable_ap_fixed_ap_fixed_18_8_5_3_0_softmax_config8_s_exp_table1 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4)
);

softmax_stable_ap_fixed_ap_fixed_18_8_5_3_0_softmax_config8_s_invert_table2 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_mul_mul_18s_17ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 28 ))
myproject_mul_mul_18s_17ns_28_1_1_U8697(
    .din0(mul_ln1118_fu_1065_p0),
    .din1(mul_ln1118_fu_1065_p1),
    .dout(mul_ln1118_fu_1065_p2)
);

myproject_mul_mul_18s_17ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 28 ))
myproject_mul_mul_18s_17ns_28_1_1_U8698(
    .din0(mul_ln1118_1_fu_1072_p0),
    .din1(mul_ln1118_1_fu_1072_p1),
    .dout(mul_ln1118_1_fu_1072_p2)
);

myproject_mul_mul_18s_17ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 28 ))
myproject_mul_mul_18s_17ns_28_1_1_U8699(
    .din0(mul_ln1118_2_fu_1079_p0),
    .din1(mul_ln1118_2_fu_1079_p1),
    .dout(mul_ln1118_2_fu_1079_p2)
);

myproject_mul_mul_18s_17ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 28 ))
myproject_mul_mul_18s_17ns_28_1_1_U8700(
    .din0(mul_ln1118_3_fu_1086_p0),
    .din1(mul_ln1118_3_fu_1086_p1),
    .dout(mul_ln1118_3_fu_1086_p2)
);

myproject_mul_mul_18s_17ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 28 ))
myproject_mul_mul_18s_17ns_28_1_1_U8701(
    .din0(mul_ln1118_4_fu_1093_p0),
    .din1(mul_ln1118_4_fu_1093_p1),
    .dout(mul_ln1118_4_fu_1093_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_res_0_V_reg_1145 <= exp_table1_q0;
        exp_res_1_V_reg_1150 <= exp_table1_q1;
        exp_res_2_V_reg_1155 <= exp_table1_q2;
        exp_res_3_V_reg_1160 <= exp_table1_q3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exp_res_0_V_reg_1145_pp0_iter3_reg <= exp_res_0_V_reg_1145;
        exp_res_1_V_reg_1150_pp0_iter3_reg <= exp_res_1_V_reg_1150;
        exp_res_2_V_reg_1155_pp0_iter3_reg <= exp_res_2_V_reg_1155;
        exp_res_3_V_reg_1160_pp0_iter3_reg <= exp_res_3_V_reg_1160;
        p_Val2_16_reg_1170 <= p_Val2_16_fu_881_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        exp_res_4_V_reg_1176 <= exp_table1_q4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_V_1_reg_1105 <= y_V_1_fu_609_p3;
        y_V_2_reg_1110 <= y_V_2_fu_643_p3;
        y_V_3_reg_1115 <= y_V_3_fu_677_p3;
        y_V_4_reg_1120 <= y_V_4_fu_711_p3;
        y_V_4_reg_1120_pp0_iter1_reg <= y_V_4_reg_1120;
        y_V_reg_1100 <= y_V_fu_575_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_3_V_ap_vld = 1'b1;
    end else begin
        res_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        res_4_V_ap_vld = 1'b1;
    end else begin
        res_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln786_1_fu_357_p2 = (xor_ln786_1_fu_351_p2 & tmp_385_fu_335_p3);

assign and_ln786_2_fu_413_p2 = (xor_ln786_2_fu_407_p2 & tmp_387_fu_391_p3);

assign and_ln786_3_fu_469_p2 = (xor_ln786_3_fu_463_p2 & tmp_389_fu_447_p3);

assign and_ln786_4_fu_525_p2 = (xor_ln786_4_fu_519_p2 & tmp_391_fu_503_p3);

assign and_ln786_fu_301_p2 = (xor_ln786_fu_295_p2 & tmp_383_fu_279_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_table1_address0 = zext_ln255_fu_719_p1;

assign exp_table1_address1 = zext_ln255_1_fu_723_p1;

assign exp_table1_address2 = zext_ln255_2_fu_727_p1;

assign exp_table1_address3 = zext_ln255_3_fu_731_p1;

assign exp_table1_address4 = zext_ln255_4_fu_735_p1;

assign icmp_ln1496_1_fu_223_p0 = data_2_V_read;

assign icmp_ln1496_1_fu_223_p1 = data_3_V_read;

assign icmp_ln1496_1_fu_223_p2 = (($signed(icmp_ln1496_1_fu_223_p0) < $signed(icmp_ln1496_1_fu_223_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_237_p2 = (($signed(select_ln65_fu_215_p3) < $signed(select_ln65_1_fu_229_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_251_p1 = data_4_V_read;

assign icmp_ln1496_3_fu_251_p2 = (($signed(select_ln65_2_fu_243_p3) < $signed(icmp_ln1496_3_fu_251_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_209_p0 = data_0_V_read;

assign icmp_ln1496_fu_209_p1 = data_1_V_read;

assign icmp_ln1496_fu_209_p2 = (($signed(icmp_ln1496_fu_209_p0) < $signed(icmp_ln1496_fu_209_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln265_fu_991_p1;

assign lhs_V_1_fu_893_p1 = p_Val2_16_reg_1170;

assign lhs_V_fu_799_p1 = p_Val2_12_fu_761_p3;

assign mul_ln1118_1_fu_1072_p0 = sext_ln1116_fu_996_p1;

assign mul_ln1118_1_fu_1072_p1 = mul_ln1118_1_fu_1072_p10;

assign mul_ln1118_1_fu_1072_p10 = exp_res_1_V_reg_1150_pp0_iter3_reg;

assign mul_ln1118_2_fu_1079_p0 = sext_ln1116_fu_996_p1;

assign mul_ln1118_2_fu_1079_p1 = mul_ln1118_2_fu_1079_p10;

assign mul_ln1118_2_fu_1079_p10 = exp_res_2_V_reg_1155_pp0_iter3_reg;

assign mul_ln1118_3_fu_1086_p0 = sext_ln1116_fu_996_p1;

assign mul_ln1118_3_fu_1086_p1 = mul_ln1118_3_fu_1086_p10;

assign mul_ln1118_3_fu_1086_p10 = exp_res_3_V_reg_1160_pp0_iter3_reg;

assign mul_ln1118_4_fu_1093_p0 = sext_ln1116_fu_996_p1;

assign mul_ln1118_4_fu_1093_p1 = mul_ln1118_4_fu_1093_p10;

assign mul_ln1118_4_fu_1093_p10 = exp_res_4_V_reg_1176;

assign mul_ln1118_fu_1065_p0 = sext_ln1116_fu_996_p1;

assign mul_ln1118_fu_1065_p1 = mul_ln1118_fu_1065_p10;

assign mul_ln1118_fu_1065_p10 = exp_res_0_V_reg_1145_pp0_iter3_reg;

assign or_ln340_1_fu_375_p2 = (xor_ln340_1_fu_369_p2 | tmp_386_fu_343_p3);

assign or_ln340_2_fu_431_p2 = (xor_ln340_2_fu_425_p2 | tmp_388_fu_399_p3);

assign or_ln340_3_fu_487_p2 = (xor_ln340_3_fu_481_p2 | tmp_390_fu_455_p3);

assign or_ln340_4_fu_543_p2 = (xor_ln340_4_fu_537_p2 | tmp_392_fu_511_p3);

assign or_ln340_5_fu_859_p2 = (xor_ln340_11_fu_853_p2 | p_Result_16_fu_827_p3);

assign or_ln340_6_fu_951_p2 = (xor_ln340_13_fu_945_p2 | p_Result_18_fu_919_p3);

assign or_ln340_fu_319_p2 = (xor_ln340_fu_313_p2 | tmp_384_fu_287_p3);

assign p_Result_14_fu_783_p3 = p_Val2_11_fu_777_p2[32'd17];

assign p_Result_15_fu_813_p3 = ret_V_fu_807_p2[32'd18];

assign p_Result_16_fu_827_p3 = p_Val2_15_fu_821_p2[32'd17];

assign p_Result_17_fu_906_p3 = ret_V_1_fu_900_p2[32'd18];

assign p_Result_18_fu_919_p3 = p_Val2_19_fu_914_p2[32'd17];

assign p_Result_s_fu_753_p3 = p_Val2_8_fu_747_p2[32'd17];

assign p_Val2_10_fu_773_p1 = exp_table1_q3;

assign p_Val2_11_fu_777_p2 = (p_Val2_9_fu_769_p1 + p_Val2_10_fu_773_p1);

assign p_Val2_12_fu_761_p3 = ((p_Result_s_fu_753_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_8_fu_747_p2);

assign p_Val2_13_fu_791_p3 = ((p_Result_14_fu_783_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_11_fu_777_p2);

assign p_Val2_15_fu_821_p2 = ($signed(p_Val2_12_fu_761_p3) + $signed(p_Val2_13_fu_791_p3));

assign p_Val2_16_fu_881_p3 = ((or_ln340_5_fu_859_p2[0:0] === 1'b1) ? select_ln340_12_fu_865_p3 : select_ln388_5_fu_873_p3);

assign p_Val2_17_fu_889_p1 = exp_table1_q4;

assign p_Val2_19_fu_914_p2 = ($signed(p_Val2_17_fu_889_p1) + $signed(p_Val2_16_reg_1170));

assign p_Val2_6_fu_739_p1 = exp_table1_q0;

assign p_Val2_7_fu_743_p1 = exp_table1_q1;

assign p_Val2_8_fu_747_p2 = (p_Val2_6_fu_739_p1 + p_Val2_7_fu_743_p1);

assign p_Val2_9_fu_769_p1 = exp_table1_q2;

assign res_0_V = {{mul_ln1118_fu_1065_p2[27:10]}};

assign res_1_V = {{mul_ln1118_1_fu_1072_p2[27:10]}};

assign res_2_V = {{mul_ln1118_2_fu_1079_p2[27:10]}};

assign res_3_V = {{mul_ln1118_3_fu_1086_p2[27:10]}};

assign res_4_V = {{mul_ln1118_4_fu_1093_p2[27:10]}};

assign ret_V_1_fu_900_p2 = ($signed(lhs_V_1_fu_893_p1) + $signed(rhs_V_1_fu_896_p1));

assign ret_V_fu_807_p2 = ($signed(rhs_V_fu_803_p1) + $signed(lhs_V_fu_799_p1));

assign rhs_V_1_fu_896_p1 = exp_table1_q4;

assign rhs_V_fu_803_p1 = p_Val2_13_fu_791_p3;

assign select_ln340_12_fu_865_p3 = ((xor_ln340_10_fu_847_p2[0:0] === 1'b1) ? 18'd131071 : p_Val2_15_fu_821_p2);

assign select_ln340_14_fu_967_p3 = ((xor_ln340_12_fu_939_p2[0:0] === 1'b1) ? 10'd511 : tmp_10_fu_957_p4);

assign select_ln340_2_fu_593_p3 = ((xor_ln340_6_fu_363_p2[0:0] === 1'b1) ? 10'd511 : tmp_2_fu_583_p4);

assign select_ln340_4_fu_627_p3 = ((xor_ln340_7_fu_419_p2[0:0] === 1'b1) ? 10'd511 : tmp_4_fu_617_p4);

assign select_ln340_6_fu_661_p3 = ((xor_ln340_8_fu_475_p2[0:0] === 1'b1) ? 10'd511 : tmp_6_fu_651_p4);

assign select_ln340_8_fu_695_p3 = ((xor_ln340_9_fu_531_p2[0:0] === 1'b1) ? 10'd511 : tmp_8_fu_685_p4);

assign select_ln340_fu_559_p3 = ((xor_ln340_5_fu_307_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_549_p4);

assign select_ln388_1_fu_601_p3 = ((and_ln786_1_fu_357_p2[0:0] === 1'b1) ? 10'd512 : tmp_2_fu_583_p4);

assign select_ln388_2_fu_635_p3 = ((and_ln786_2_fu_413_p2[0:0] === 1'b1) ? 10'd512 : tmp_4_fu_617_p4);

assign select_ln388_3_fu_669_p3 = ((and_ln786_3_fu_469_p2[0:0] === 1'b1) ? 10'd512 : tmp_6_fu_651_p4);

assign select_ln388_4_fu_703_p3 = ((and_ln786_4_fu_525_p2[0:0] === 1'b1) ? 10'd512 : tmp_8_fu_685_p4);

assign select_ln388_5_fu_873_p3 = ((underflow_fu_841_p2[0:0] === 1'b1) ? 18'd131072 : p_Val2_15_fu_821_p2);

assign select_ln388_6_fu_975_p3 = ((underflow_1_fu_933_p2[0:0] === 1'b1) ? 10'd512 : tmp_10_fu_957_p4);

assign select_ln388_fu_567_p3 = ((and_ln786_fu_301_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_549_p4);

assign select_ln65_1_fu_229_p1 = data_3_V_read;

assign select_ln65_1_fu_229_p2 = data_2_V_read;

assign select_ln65_1_fu_229_p3 = ((icmp_ln1496_1_fu_223_p2[0:0] === 1'b1) ? select_ln65_1_fu_229_p1 : select_ln65_1_fu_229_p2);

assign select_ln65_2_fu_243_p3 = ((icmp_ln1496_2_fu_237_p2[0:0] === 1'b1) ? select_ln65_1_fu_229_p3 : select_ln65_fu_215_p3);

assign select_ln65_fu_215_p1 = data_1_V_read;

assign select_ln65_fu_215_p2 = data_0_V_read;

assign select_ln65_fu_215_p3 = ((icmp_ln1496_fu_209_p2[0:0] === 1'b1) ? select_ln65_fu_215_p1 : select_ln65_fu_215_p2);

assign sext_ln1116_fu_996_p1 = $signed(invert_table2_q0);

assign sext_ln703_1_fu_269_p1 = $signed(x_max_V_fu_257_p3);

assign sext_ln703_2_fu_325_p0 = data_1_V_read;

assign sext_ln703_2_fu_325_p1 = sext_ln703_2_fu_325_p0;

assign sext_ln703_3_fu_381_p0 = data_2_V_read;

assign sext_ln703_3_fu_381_p1 = sext_ln703_3_fu_381_p0;

assign sext_ln703_4_fu_437_p0 = data_3_V_read;

assign sext_ln703_4_fu_437_p1 = sext_ln703_4_fu_437_p0;

assign sext_ln703_5_fu_493_p0 = data_4_V_read;

assign sext_ln703_5_fu_493_p1 = sext_ln703_5_fu_493_p0;

assign sext_ln703_fu_265_p0 = data_0_V_read;

assign sext_ln703_fu_265_p1 = sext_ln703_fu_265_p0;

assign sub_ln1193_1_fu_329_p2 = ($signed(sext_ln703_2_fu_325_p1) - $signed(sext_ln703_1_fu_269_p1));

assign sub_ln1193_2_fu_385_p2 = ($signed(sext_ln703_3_fu_381_p1) - $signed(sext_ln703_1_fu_269_p1));

assign sub_ln1193_3_fu_441_p2 = ($signed(sext_ln703_4_fu_437_p1) - $signed(sext_ln703_1_fu_269_p1));

assign sub_ln1193_4_fu_497_p2 = ($signed(sext_ln703_5_fu_493_p1) - $signed(sext_ln703_1_fu_269_p1));

assign sub_ln1193_fu_273_p2 = ($signed(sext_ln703_fu_265_p1) - $signed(sext_ln703_1_fu_269_p1));

assign tmp_10_fu_957_p4 = {{p_Val2_19_fu_914_p2[17:8]}};

assign tmp_2_fu_583_p4 = {{sub_ln1193_1_fu_329_p2[17:8]}};

assign tmp_383_fu_279_p3 = sub_ln1193_fu_273_p2[32'd18];

assign tmp_384_fu_287_p3 = sub_ln1193_fu_273_p2[32'd17];

assign tmp_385_fu_335_p3 = sub_ln1193_1_fu_329_p2[32'd18];

assign tmp_386_fu_343_p3 = sub_ln1193_1_fu_329_p2[32'd17];

assign tmp_387_fu_391_p3 = sub_ln1193_2_fu_385_p2[32'd18];

assign tmp_388_fu_399_p3 = sub_ln1193_2_fu_385_p2[32'd17];

assign tmp_389_fu_447_p3 = sub_ln1193_3_fu_441_p2[32'd18];

assign tmp_390_fu_455_p3 = sub_ln1193_3_fu_441_p2[32'd17];

assign tmp_391_fu_503_p3 = sub_ln1193_4_fu_497_p2[32'd18];

assign tmp_392_fu_511_p3 = sub_ln1193_4_fu_497_p2[32'd17];

assign tmp_4_fu_617_p4 = {{sub_ln1193_2_fu_385_p2[17:8]}};

assign tmp_6_fu_651_p4 = {{sub_ln1193_3_fu_441_p2[17:8]}};

assign tmp_8_fu_685_p4 = {{sub_ln1193_4_fu_497_p2[17:8]}};

assign tmp_fu_549_p4 = {{sub_ln1193_fu_273_p2[17:8]}};

assign underflow_1_fu_933_p2 = (xor_ln786_6_fu_927_p2 & p_Result_17_fu_906_p3);

assign underflow_fu_841_p2 = (xor_ln786_5_fu_835_p2 & p_Result_15_fu_813_p3);

assign x_max_V_fu_257_p1 = data_4_V_read;

assign x_max_V_fu_257_p3 = ((icmp_ln1496_3_fu_251_p2[0:0] === 1'b1) ? x_max_V_fu_257_p1 : select_ln65_2_fu_243_p3);

assign xor_ln340_10_fu_847_p2 = (p_Result_16_fu_827_p3 ^ p_Result_15_fu_813_p3);

assign xor_ln340_11_fu_853_p2 = (p_Result_15_fu_813_p3 ^ 1'd1);

assign xor_ln340_12_fu_939_p2 = (p_Result_18_fu_919_p3 ^ p_Result_17_fu_906_p3);

assign xor_ln340_13_fu_945_p2 = (p_Result_17_fu_906_p3 ^ 1'd1);

assign xor_ln340_1_fu_369_p2 = (tmp_385_fu_335_p3 ^ 1'd1);

assign xor_ln340_2_fu_425_p2 = (tmp_387_fu_391_p3 ^ 1'd1);

assign xor_ln340_3_fu_481_p2 = (tmp_389_fu_447_p3 ^ 1'd1);

assign xor_ln340_4_fu_537_p2 = (tmp_391_fu_503_p3 ^ 1'd1);

assign xor_ln340_5_fu_307_p2 = (tmp_384_fu_287_p3 ^ tmp_383_fu_279_p3);

assign xor_ln340_6_fu_363_p2 = (tmp_386_fu_343_p3 ^ tmp_385_fu_335_p3);

assign xor_ln340_7_fu_419_p2 = (tmp_388_fu_399_p3 ^ tmp_387_fu_391_p3);

assign xor_ln340_8_fu_475_p2 = (tmp_390_fu_455_p3 ^ tmp_389_fu_447_p3);

assign xor_ln340_9_fu_531_p2 = (tmp_392_fu_511_p3 ^ tmp_391_fu_503_p3);

assign xor_ln340_fu_313_p2 = (tmp_383_fu_279_p3 ^ 1'd1);

assign xor_ln786_1_fu_351_p2 = (tmp_386_fu_343_p3 ^ 1'd1);

assign xor_ln786_2_fu_407_p2 = (tmp_388_fu_399_p3 ^ 1'd1);

assign xor_ln786_3_fu_463_p2 = (tmp_390_fu_455_p3 ^ 1'd1);

assign xor_ln786_4_fu_519_p2 = (tmp_392_fu_511_p3 ^ 1'd1);

assign xor_ln786_5_fu_835_p2 = (p_Result_16_fu_827_p3 ^ 1'd1);

assign xor_ln786_6_fu_927_p2 = (p_Result_18_fu_919_p3 ^ 1'd1);

assign xor_ln786_fu_295_p2 = (tmp_384_fu_287_p3 ^ 1'd1);

assign y_V_1_fu_609_p3 = ((or_ln340_1_fu_375_p2[0:0] === 1'b1) ? select_ln340_2_fu_593_p3 : select_ln388_1_fu_601_p3);

assign y_V_2_fu_643_p3 = ((or_ln340_2_fu_431_p2[0:0] === 1'b1) ? select_ln340_4_fu_627_p3 : select_ln388_2_fu_635_p3);

assign y_V_3_fu_677_p3 = ((or_ln340_3_fu_487_p2[0:0] === 1'b1) ? select_ln340_6_fu_661_p3 : select_ln388_3_fu_669_p3);

assign y_V_4_fu_711_p3 = ((or_ln340_4_fu_543_p2[0:0] === 1'b1) ? select_ln340_8_fu_695_p3 : select_ln388_4_fu_703_p3);

assign y_V_5_fu_983_p3 = ((or_ln340_6_fu_951_p2[0:0] === 1'b1) ? select_ln340_14_fu_967_p3 : select_ln388_6_fu_975_p3);

assign y_V_fu_575_p3 = ((or_ln340_fu_319_p2[0:0] === 1'b1) ? select_ln340_fu_559_p3 : select_ln388_fu_567_p3);

assign zext_ln255_1_fu_723_p1 = y_V_1_reg_1105;

assign zext_ln255_2_fu_727_p1 = y_V_2_reg_1110;

assign zext_ln255_3_fu_731_p1 = y_V_3_reg_1115;

assign zext_ln255_4_fu_735_p1 = y_V_4_reg_1120_pp0_iter1_reg;

assign zext_ln255_fu_719_p1 = y_V_reg_1100;

assign zext_ln265_fu_991_p1 = y_V_5_fu_983_p3;

endmodule //softmax_stable_ap_fixed_ap_fixed_18_8_5_3_0_softmax_config8_s
