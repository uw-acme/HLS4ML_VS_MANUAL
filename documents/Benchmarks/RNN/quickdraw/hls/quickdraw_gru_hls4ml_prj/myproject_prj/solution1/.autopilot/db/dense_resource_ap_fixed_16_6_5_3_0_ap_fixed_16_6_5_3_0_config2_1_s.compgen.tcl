# This script segment is generated automatically by AutoPilot

set id 1
set name myproject_mux_32_16_1_1
set corename simcore_mux
set op mux
set stage_num 1
set max_latency -1
set registered_input 1
set din0_width 16
set din0_signed 0
set din1_width 16
set din1_signed 0
set din2_width 16
set din2_signed 0
set din3_width 2
set din3_signed 0
set dout_width 16
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mux] == "ap_gen_simcore_mux"} {
eval "ap_gen_simcore_mux { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    din0_width ${din0_width} \
    din0_signed ${din0_signed} \
    din1_width ${din1_width} \
    din1_signed ${din1_signed} \
    din2_width ${din2_width} \
    din2_signed ${din2_signed} \
    din3_width ${din3_width} \
    din3_signed ${din3_signed} \
    dout_width ${dout_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_mux, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op mux
set corename MuxnS
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_pipemux] == "::AESL_LIB_VIRTEX::xil_gen_pipemux"} {
eval "::AESL_LIB_VIRTEX::xil_gen_pipemux { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    din0_width ${din0_width} \
    din0_signed ${din0_signed} \
    din1_width ${din1_width} \
    din1_signed ${din1_signed} \
    din2_width ${din2_width} \
    din2_signed ${din2_signed} \
    din3_width ${din3_width} \
    din3_signed ${din3_signed} \
    dout_width ${dout_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_pipemux, check your platform lib"
}
}


set id 2
set name myproject_mux_83_16_1_1
set corename simcore_mux
set op mux
set stage_num 1
set max_latency -1
set registered_input 1
set din0_width 16
set din0_signed 0
set din1_width 16
set din1_signed 0
set din2_width 16
set din2_signed 0
set din3_width 16
set din3_signed 0
set din4_width 16
set din4_signed 0
set din5_width 16
set din5_signed 0
set din6_width 16
set din6_signed 0
set din7_width 16
set din7_signed 0
set din8_width 3
set din8_signed 0
set dout_width 16
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mux] == "ap_gen_simcore_mux"} {
eval "ap_gen_simcore_mux { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    din0_width ${din0_width} \
    din0_signed ${din0_signed} \
    din1_width ${din1_width} \
    din1_signed ${din1_signed} \
    din2_width ${din2_width} \
    din2_signed ${din2_signed} \
    din3_width ${din3_width} \
    din3_signed ${din3_signed} \
    din4_width ${din4_width} \
    din4_signed ${din4_signed} \
    din5_width ${din5_width} \
    din5_signed ${din5_signed} \
    din6_width ${din6_width} \
    din6_signed ${din6_signed} \
    din7_width ${din7_width} \
    din7_signed ${din7_signed} \
    din8_width ${din8_width} \
    din8_signed ${din8_signed} \
    dout_width ${dout_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_mux, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op mux
set corename MuxnS
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_pipemux] == "::AESL_LIB_VIRTEX::xil_gen_pipemux"} {
eval "::AESL_LIB_VIRTEX::xil_gen_pipemux { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    din0_width ${din0_width} \
    din0_signed ${din0_signed} \
    din1_width ${din1_width} \
    din1_signed ${din1_signed} \
    din2_width ${din2_width} \
    din2_signed ${din2_signed} \
    din3_width ${din3_width} \
    din3_signed ${din3_signed} \
    din4_width ${din4_width} \
    din4_signed ${din4_signed} \
    din5_width ${din5_width} \
    din5_signed ${din5_signed} \
    din6_width ${din6_width} \
    din6_signed ${din6_signed} \
    din7_width ${din7_width} \
    din7_signed ${din7_signed} \
    din8_width ${din8_width} \
    din8_signed ${din8_signed} \
    dout_width ${dout_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_pipemux, check your platform lib"
}
}


set id 3
set name myproject_mul_mul_16s_16s_26_1_1
set corename simcore_mul
set op mul
set stage_num 1
set max_latency -1
set registered_input 1
set in0_width 16
set in0_signed 1
set in1_width 16
set in1_signed 1
set out_width 26
set exp i0*i1
set arg_lists {i0 {16 1 +} i1 {16 1 +} p {26 1 +} acc {0} }
set TrueReset 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mul] == "ap_gen_simcore_mul"} {
eval "ap_gen_simcore_mul { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    true_reset ${TrueReset} \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
    exp ${exp} \
    arg_lists {${arg_lists}} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_mul, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op mul
set corename DSP48
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_dsp48] == "::AESL_LIB_VIRTEX::xil_gen_dsp48"} {
eval "::AESL_LIB_VIRTEX::xil_gen_dsp48 { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    true_reset ${TrueReset} \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
    exp ${exp} \
    arg_lists {${arg_lists}} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_dsp48, check your platform lib"
}
}


set id 50
set name myproject_mul_mul_16s_12s_26_1_1
set corename simcore_mul
set op mul
set stage_num 1
set max_latency -1
set registered_input 1
set in0_width 16
set in0_signed 1
set in1_width 12
set in1_signed 1
set out_width 26
set exp i0*i1
set arg_lists {i0 {16 1 +} i1 {12 1 +} p {26 1 +} acc {0} }
set TrueReset 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mul] == "ap_gen_simcore_mul"} {
eval "ap_gen_simcore_mul { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    true_reset ${TrueReset} \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
    exp ${exp} \
    arg_lists {${arg_lists}} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_mul, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op mul
set corename DSP48
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_dsp48] == "::AESL_LIB_VIRTEX::xil_gen_dsp48"} {
eval "::AESL_LIB_VIRTEX::xil_gen_dsp48 { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    true_reset ${TrueReset} \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
    exp ${exp} \
    arg_lists {${arg_lists}} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_dsp48, check your platform lib"
}
}


# Memory (RAM/ROM)  definition:
set ID 55
set hasByteEnable 0
set MemName dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_1_s_outidx
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 3
set AddrRange 24
set AddrWd 5
set TrueReset 0
set IsROM 1
set ROMData { "000" "000" "000" "001" "001" "001" "010" "010" "010" "011" "011" "011" "100" "100" "100" "101" "101" "101" "110" "110" "110" "111" "111" "111" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.158
set ClkPeriod 5
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 56
set hasByteEnable 0
set MemName dense_resource_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_1_s_w2_V
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 764
set AddrRange 24
set AddrWd 5
set TrueReset 0
set IsROM 1
set ROMData { "11110001111011111111101101011111111111000111111111111100011100000000000100000000000000000100111111111111110011111111110111010000000000011011111111110110100000000000001011110000000000000110000000000001111000000000000010100000000001011000000000001000011100000000110100101111111110000100000000000000010011111111111001000000000000000110000000000001000000000000000001100000000001010111111111111101100100000000000100110000000001111011111111111100110100000000000111000000000000101101000000001001100000000001001101110000000001101100000000000101010011111111111100000000000000010010111111111111100111111111111110100000000000000000111111111010111011111111111010001111111110011111000000000000001000000000001001101111111111101101111111111110100011111111111111011111111111000110" "00000010001111111111111000011111111111000100000000000010010111111111111101101111111111100010000000000001110100000000001100110000000011001111111111111111000000000000011000100000000000010001111111111110111111111111111110011111111111111010111111111110011000000000100001101111111101100011000000001110100100000000001001100000000001101001111111111011010000000000001001001111111111110001111111111101001111111110111101110000000000001100111111111010100100000000000101001111111111001101000000000000000000000010000101001111111110101111000000000010000111111111101100111111111111111001000000000010111100000000000100101111111111101000000000000111010100000000011000000000000000100000111111111111000000000000000111111111111110101111000000000001101000000000000000101111111011011010" "00010010101011111111010111010000000010010010000000000010000000000100000101010000001011100000111111000101100100000001101111010000000110010100000000000100100011111111101110101111101101100101111111101111000111111100100101000000000100111110111111100111011100000010010101111111111010001011000000001010001011111110000011001111111011110001111111100000110000000010010000110000000010001001111111011001011100000000100110101111110111110101111110100110001011111110001000110000010101100111111111101101010000000010101101000000000000000001111111100000011011111111110010101111111111101000000000111010111011111111101101010000000101010011111111011100111000000010100101001111111110001101111111011101100111111011110110001111111111110100111111000101001000000000110000111111111100110000" "00000010011100000000000011000000000000000001111111111111111011111111111101010000000000010110111111111111010000000000001011100000000000000001000000000001110000000000000011000000000000000010000000000000011000000001000100001111111111100111111111111111111100000000010100010000000000000100000000000100100111111111111010001111111111100010000000000100100000000000001001011111111110110011000000000000000011111111010000000000000000110100000000000100000011111111111111101111111111101011111111111110000000000000001111001111111101111011111111111101110111111111111111010000000000001011000000000010011100000000000001011111111111101010000000001011011100000000000000110000000000011111111111111101000000000000000010000000000000101100111111110100101011111111101000101111111111110011" "00000011000111111111101011100000000001001011111111111101101011111111111110010000000000011010000000000000000000000000000110111111111111111100000000000001110011111111111001010000000000101110000000000010000000000000011111101111111110100111111111111100000100000000001011000000000000101010000000000000001100000000001110100000000001100101000000000000010100000000001010001111111100001000000000000110100011111111011111010000000001100000000000000001101000000000001100011111111111000001000000001010110011111111111001000000000000110011000000000000110011111111111011010000000000100100111111111101011100000000000010011111111111110011111111111110111011111111111001110000000000100111000000000101101100000000000011110000000000001011111111111011010011111111101100101111111110001011" "01000011111100000001110001101111111111100111000000001100001100000010001111011111111010010010111111111000010000000000100110010000000111000110111111100100100000000100011011101111111010101100000000011101100000000010101000011111111111001001111111100110010111111101100110011111110101100011111111111011011000000100110000111111110110000101000000100000100111111101000111110000000010000001000001100110101100000000110010001111110001000110000000000111101000000011100010101111111110000010000000000000111011111111010000001111111101100011111111111000010100000000001001001111110100110000111111101110000000000100001110111111111111111011111111111110010111111100000000010000000111011101111111101111000111111011101110101111111001110101111111000011010000000000010111100000001000101111" "11111110101000000000001010000000000001110101111111111011111100000000000001010000000000100010111111101110111000000000000011100000000000100010000000000000110011111111101001001111111110111110000000000001110100000000001110010000000011000011111111111111011100000000010001101111111110111011111111111100110000000000000010111111111111101001000000001110111011111111111111100000000000010101000000000111000111111111110011110000000001110001111111111011001100000000010011110000000001111011000000000101000000000000001011101111111110011000000000000010001100000000100010101111111111110011000000000001110011111111111000111111111100101011000000000010111000000000000010011111111111111110111111111110111100000000000101001111111101000100111111111100110100000000011101110000000000010000" "11111111101111111111110001110000000000100000111111111001001011111111111100110000000000011010111111111101110000000000000111100000000000010100111111111110000111111110111101101111111111111011111111111100001000000000000011110000000000010101111111110110000000000000010011011111111111000011111111111101101100000000001001001111111111110010000000001001000000000000011101110000000010001111111111111100011011111111101000111111111101100010111111111011001100000000111000100000000000000000000000000110101011111111011000111111111111001010111111111110001111111111111111111111111111100010111111111110110100000000001010101111111111100001111111111101011100000000000010101111111111110011111111111011011100000000000000011111111111100101111111111111111111111111101010001111111111010010" "00001110000100000000001101101111111001001110000000010001100100001000010010000000001001011111111111101111111011111111001001100000000101100111000000101011010111111101110010010000000100110010000000011000100100000010001010111111111110100000000000110100011100000000001110000000000111000001111110110110100100000100001011101111101001100010111111010101011111111111011100001111111011101100000000011001101111111110011010010000000100000010000000100001011000000010101000000000010110110111111111101111001111111101000111011111110111110010000000010100000111111110111100101111111010100011111110110111111011111111010110011111111011111111111111110001100000000000001000011111111010001000111111101010100111111110001000010000000100001111000000010101011011111111011100011111111111010011" "00000000100100000000000110010000000000010110111111111111111100000000000000101111111110101001000000000000001000000000000011110000000000011010000000000101010000000000000010000000000001010010111111111110111100000000000010110000000000010110111111111111101100000000000000110000000000001011000000001101000111111111101101111111111101011010111111110001010000000000000001101111111110100101111111111110100011111111111100011111111111100101000000000111011000000000010010100000000000001100000000000110111000000000000011101111111111101101000000000011001011111111011011110000000000110001000000000000100100000000001101001111111111111111000000000001011111111111111100010000000000001100111111111111110000000000010100100000000000001101111111111110111011111111110100001111111111111110" "00000000111000000000001000100000000000011101111111111111100011111111110101000000000000000110111111111111110000000000000011011111111111001110000000000010111111111111111101111111111110101110000000000000110100000000010000111111111111100000000000000000000100000000010100110000000000010010111111111111001011111111111101011111111101100100000000000010110011111111111101111111111110011011111111111110000011111111100001111111111111001010000000000011001111111110101101110000000001010000000000000001111000000000000000001111111111011000000000000000100011111111110110111111111111101100000000000001101100000000000100001111111111111011000000000001100111111111111110100000000000110011000000000001110011111111011011000000000001011110000000000011011100000000000010111111111111111111" "11100100001111111110111010011111110000101011000000000010000011111101001111010000000000000110111111111111011011111101010101111111101000100010111110110001001111111011001000011111111111001100111111100000110000000010000001011111111001000001000000000001000100000110111000011111100001000101000000100101110100000010110000100000000000101110000000011100100000000000101101010000000111011101000000100000011111111110110011010000000010010110111111111110001011111100010010000000001001110110000000011100011111111111011110001111110011110000000000010010011011111110010010000000001001010110111111111111010000000000101110001111111011111000000000000000111111111111000011000000010000111110111111011011101000000000100001100000000011100100111111010010011011111111111111010000000000110011" "11111111000000000000001010101111111111001010111111111101000111111111110010010000000000010000000000000100101111111111111100110000000000100100000000000000001011111111011111101111111111100101111111111100100100000000000000110000000001100110000000000101000100000000010010010000000001100110000000000000001000000000000001101111111011011111111111111111010100000000001011011111111111011000111111111010101011111111111011110000000000000110000000000001010000000000010010010000000000000100000000000101101011111111101110101111111111100110111111111101010100000000001101100000000000010110000000000001110100000000001111010000000000010100000000000000010111111111110100110000000000000011000000000000101000000000000000100000000000000110000000000000011011111111110100101111111111101010" "11111101011000000000000011010000000001011111000000000000001011111111111010100000000000001010000000000110100000000000000111101111111110100100111111111100101100000000100000011111111111111110000000000000101100000000000000001111111111110011000000000101101000000000000100110000000011100010111111111100000100000000010010011111111111010001111111111011000100000000010010001111111101100001111111111000110111111111111101010000000101010000000000000001001000000000011111101111111111001010111111111100011111111111111100101111111111101110000000000000000000000000011011001111111111110000111111111110110100000000001000001111111111111001000000000000110100000000011010011111111111110000111111111101011111111111111110101111111111110101111111111111110000000000001011000000000000110100" "00000110100011111100000100011111111100100000000000000111010011111111011111100000001011101100111111110011111011111100010101100000010000100110111111100100011111111110010000011111111011111101000000001100101111111111000110110000000100001100000000100001101000000000101000000000001001010110000000011100111011111101110101000000000111100010000000011001110000000010010000000000001101001001111111010010100000000100110101001111111111010010111111111111110000000001010001110000000000100111111111110110000011111110001000001111111101011000111111010110010011111111110111100000000001110111000000000101000111111110111100000000000000101100111111001111001000000110001001001111111101000111000000111110101011111111000110000000000011011010111111001100100000000001001110001111111011010100" "00000110011000000000000001000000000000001100000000000000000000000000000010110000000000001100000000000000000011111111111001111111111111111101111111111011111011111111111111100000000000001010000000000011110100000000010111111111111111110001000000000110101000000001000010001111111111111110111111111111111111111111111101110000000000010011111111111111111000000000001011111111111101111101000000000000101000000000011101011111111111100010000000000001001011111111100110010000000101001101111111111110101100000000110101010000000001110101111111111111101100000000000101111111111111111111000000000001000000000000000000111111111111100001000000000011000011111111111100110000000000100011000000000000000111111111110001001111111111101001111111110111110100000000001001011111111111011000" "00000001001011111111111111111111111111111111000000000000001111111111111011010000000000000000111111111010100100000000000011101111111110111011000000000000101000000000001010011111111111101111111111111110000011111111011101100000000000001110111111111100100111111111111010110000000000000100000000000111100111111111110111001111111110111001111111111111000100000000100100110000000010110111111111111101011100000000010111000000000000000111000000000000111000000000000111100000000010010110000000000001101000000000010111100000000000011101000000000000000011111111111011100000000000000000111111111011111000000000000100001111111111101100111111111111011000000000000001010000000000001010111111111100110100000000001000010000000000001111111111111110111000000000000111100000000000001011" "00000010001111111111110111111111111110100111111111110011010111111001100100111111111011100011111111011111000111111100101111110000001001001111111111110101000011111111110001111111101100101101111111101110010111111111110010001111111111101010000000011101011000000010100101001111111001011101000000010000000000000000111100101111110110100111000001000111011100000001110011110000000101000111000001000000011111111111101111001111111011001001000000001010001111111110111000100000000111010001000001001000011100000001010111001111111111010100111111010011101111111111011011111111111100111111111111001001101100000001010110100000000101100110111111110110101100000000000110001111110100010011000000110000100111111010101110100000000110011110000000000001011111111111101010110000000101111011" "11111111110100000000000010111111111111101001111111111111111111111111111111101111111111111100000000000010000011111111111101010000000000001110111111111101010100000000001110101111111111111111111111110110110000000000010001010000000000000000000000000001101100000000010011101111111111001101000000000101111011111111110111011111111111110111000000000000011011111110010000001111111011100111000000001110011100000000000010111111111111111011111111111111011100000000000001101111111111100100000000000000100100000000000101011111111110011000111111111111111011111111110111100000000000101001111111111111111100000000000001011111111111111100000000000110101011111111110110110000000000000011111111111111100111111111111110111111111111010111111111111110101100000000000000100000000001010001" "00000000100100000000000100000000000001010110000000000000010011111111111110011111111111111001111111110001001011111111101011101111111111111110111111111101011011111111110011110000000000001111111111110111111000000000000000010000000000011111111111111110011011111111111011011111111110101010111111110100011000000000000001001111111111111100111111110110101100000000011010011111111101100111111111111100100111111111100001110000000001000010111111111110000011111111111100001111111011111000111111111011000011111111111010000000000000010000111111111111111011111111001010110000000000000111000000000000001100000000011100011111111111100101111111111101101100000000000010110000000001001001000000000001011000000000000111101111111111111010111111111110111100000000000111100000000000111000" "11100110001111111101101011100000010001110101000001001111011000000000100010111111110110101111111111100110111000000000000110010000001011101000000000011111110100000000001110001111111011001000000000101000100000000000011000101111111011111111111110001001010000000000101000101111111110001111111111100011101011111110000010010000001111001010111111010000101000000001110011000000001000011000000000100101110111111100010101100000000001111101111111110000111100000110110110010000001011010000000000011111010011111011101101000000001001001110000000001011100011111111100010111111111010011101111110110001110011111100001110001111110111110101111111101110001011111111001010011111110100101111111111110110001111111111111101011111101110111010111111001101001000000101111000111111111000010101" "11111011111100000000000111001111111111111011000000000000010100000000001010011111111111111101111111111111111011111111001100110000000001001100000000000001110100000000001011000000000000010101111111111101101111111111111101011111111111111100111111111001111100000000001110010000000011011101000000000000101011111111111110101111111011011000000000000010001100000000011011101111111111100110000000000111110011111111100110011111111101101110000000000101101111111111101111101111111111110000111111111111101100000000011010000000000000100110000000000001001100000000000000110000000000000011000000000101101011111111111010111111111111011010111111111100010011111111110111001111111111010111111111111111000000000000010110110000000001111000111111111111100100000000000001111111111110110100" "00000110001100000000100100101111111111101110000000000000001100000000010000111111111111101110111111111111111100000000010011101111111111111101000000000000111111111111101100111111111110010101111111111111110100000000001001101111111111111100000000000010110000000000011110101111111011101010000000000000000100000000001111010000000001101110111111110101101000000000111000101111111110111110000000000001111100000000010101111111111110001101000000000000011000000000001011101111111111011100111111111100101011111111111011011111111111111000111111111110100100000000000010111111111111110101111111111101101000000000001101001111111110111101000000000001000011111111111001011111111111011011000000000010110011111111111100110000000000010011111111111110011000000000000110111111111110110100" "11111010100011111110110110110000000000000000111111111110110000000000001101111111111001101111111111101101101011111101010001111111111100101110111111101011100000000010010010100000000110100111111111101111001000000000011111111111111001000000000000011101110111111111000010001111101110011101000000011001011000000001001100101111111100101011000000000110010011111101110011110000001101010001000000011110101100000000010010001111110110110111000000101000001000000000001100111111111001101001111111111010000100000010111011100000001101010000000000000100110111111010001001010000000011111010000000000001101100000000100110111111111111101001000000000110001111111111010001001111111111011010000000011111110111111110101010001111110011010100000000011110111011111110001111011111111100000000" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 1.158
set ClkPeriod 5
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
    AESL_LIB_XILADAPTER::native_axis_begin
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 57 \
    name data_0_V_read \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_data_0_V_read \
    op interface \
    ports { data_0_V_read { I 16 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 58 \
    name data_1_V_read \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_data_1_V_read \
    op interface \
    ports { data_1_V_read { I 16 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 59 \
    name data_2_V_read \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_data_2_V_read \
    op interface \
    ports { data_2_V_read { I 16 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -1 \
    name ap_ctrl \
    type ap_ctrl \
    reset_level 1 \
    sync_rst true \
    corename ap_ctrl \
    op interface \
    ports { ap_start { I 1 bit } ap_ready { O 1 bit } ap_done { O 1 bit } ap_idle { O 1 bit } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -2 \
    name ap_return \
    type ap_return \
    reset_level 1 \
    sync_rst true \
    corename ap_return \
    op interface \
    ports { ap_return { O 1 vector } } \
} "
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -3 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -4 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_rst \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
    AESL_LIB_XILADAPTER::native_axis_end
}


