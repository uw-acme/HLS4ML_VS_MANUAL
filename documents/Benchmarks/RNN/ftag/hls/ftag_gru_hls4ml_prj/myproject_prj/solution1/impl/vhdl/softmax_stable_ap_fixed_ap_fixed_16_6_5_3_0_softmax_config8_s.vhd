-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    res_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_0_V_ap_vld : OUT STD_LOGIC;
    res_1_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_1_V_ap_vld : OUT STD_LOGIC;
    res_2_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_2_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_0_V_reg_674 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_679 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_684 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln255_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_1_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_2_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1496_fu_155_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_155_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_161_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_161_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_161_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_169_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_175_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_fu_183_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_V_fu_175_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_fu_183_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_1_fu_187_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_fu_191_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_360_fu_205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_359_fu_197_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_2_fu_243_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_2_fu_243_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_1_fu_247_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_362_fu_261_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_361_fu_253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_3_fu_299_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_3_fu_299_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_2_fu_303_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_364_fu_317_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_363_fu_309_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_355_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_365_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_373_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_fu_381_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_4_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_394_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_404_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_412_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_420_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_5_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_433_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_2_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_443_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_451_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_459_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln36_2_fu_480_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln36_1_fu_476_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_fu_484_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_fu_494_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_fu_490_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_498_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln36_fu_472_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_9_fu_512_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_7_fu_518_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_504_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_7_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_6_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_556_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal underflow_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_566_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_574_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_582_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_fu_638_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_1_fu_645_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_2_fu_652_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_fu_638_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_fu_638_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1116_fu_595_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_1_fu_645_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_1_fu_645_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_2_fu_652_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_2_fu_652_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1118_1_fu_645_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_2_fu_652_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_fu_638_p00 : STD_LOGIC_VECTOR (25 downto 0);

    component myproject_mul_mul_17ns_18s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s_exp_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s_invert_table2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s_exp_table1
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2);

    invert_table2_U : component softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s_invert_table2
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    myproject_mul_mul_17ns_18s_26_1_1_U4517 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_fu_638_p0,
        din1 => mul_ln1118_fu_638_p1,
        dout => mul_ln1118_fu_638_p2);

    myproject_mul_mul_17ns_18s_26_1_1_U4518 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_1_fu_645_p0,
        din1 => mul_ln1118_1_fu_645_p1,
        dout => mul_ln1118_1_fu_645_p2);

    myproject_mul_mul_17ns_18s_26_1_1_U4519 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_2_fu_652_p0,
        din1 => mul_ln1118_2_fu_652_p1,
        dout => mul_ln1118_2_fu_652_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_res_0_V_reg_674 <= exp_table1_q0;
                exp_res_1_V_reg_679 <= exp_table1_q1;
                exp_res_2_V_reg_684 <= exp_table1_q2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln786_1_fu_275_p2 <= (xor_ln786_1_fu_269_p2 and tmp_361_fu_253_p3);
    and_ln786_2_fu_331_p2 <= (xor_ln786_2_fu_325_p2 and tmp_363_fu_309_p3);
    and_ln786_fu_219_p2 <= (xor_ln786_fu_213_p2 and tmp_359_fu_197_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_table1_address0 <= zext_ln255_fu_389_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln255_1_fu_428_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln255_2_fu_467_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_1_fu_169_p1 <= data_2_V_read;
    icmp_ln1496_1_fu_169_p2 <= "1" when (signed(select_ln65_fu_161_p3) < signed(icmp_ln1496_1_fu_169_p1)) else "0";
    icmp_ln1496_fu_155_p0 <= data_0_V_read;
    icmp_ln1496_fu_155_p1 <= data_1_V_read;
    icmp_ln1496_fu_155_p2 <= "1" when (signed(icmp_ln1496_fu_155_p0) < signed(icmp_ln1496_fu_155_p1)) else "0";
    invert_table2_address0 <= zext_ln265_fu_590_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_484_p2),19));

    mul_ln1118_1_fu_645_p0 <= mul_ln1118_1_fu_645_p00(17 - 1 downto 0);
    mul_ln1118_1_fu_645_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_679),26));
    mul_ln1118_1_fu_645_p1 <= sext_ln1116_fu_595_p1(18 - 1 downto 0);
    mul_ln1118_2_fu_652_p0 <= mul_ln1118_2_fu_652_p00(17 - 1 downto 0);
    mul_ln1118_2_fu_652_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_684),26));
    mul_ln1118_2_fu_652_p1 <= sext_ln1116_fu_595_p1(18 - 1 downto 0);
    mul_ln1118_fu_638_p0 <= mul_ln1118_fu_638_p00(17 - 1 downto 0);
    mul_ln1118_fu_638_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_674),26));
    mul_ln1118_fu_638_p1 <= sext_ln1116_fu_595_p1(18 - 1 downto 0);
    or_ln340_1_fu_293_p2 <= (xor_ln340_1_fu_287_p2 or tmp_362_fu_261_p3);
    or_ln340_2_fu_349_p2 <= (xor_ln340_2_fu_343_p2 or tmp_364_fu_317_p3);
    or_ln340_3_fu_550_p2 <= (xor_ln340_7_fu_544_p2 or p_Result_7_fu_518_p3);
    or_ln340_fu_237_p2 <= (xor_ln340_fu_231_p2 or tmp_360_fu_205_p3);
    p_Result_7_fu_518_p3 <= p_Val2_9_fu_512_p2(17 downto 17);
    p_Result_s_fu_504_p3 <= ret_V_1_fu_498_p2(18 downto 18);
    p_Val2_9_fu_512_p2 <= std_logic_vector(unsigned(zext_ln36_fu_472_p1) + unsigned(ret_V_fu_484_p2));
    res_0_V <= mul_ln1118_fu_638_p2(25 downto 10);

    res_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_0_V_ap_vld <= ap_const_logic_1;
        else 
            res_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V <= mul_ln1118_1_fu_645_p2(25 downto 10);

    res_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_1_V_ap_vld <= ap_const_logic_1;
        else 
            res_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V <= mul_ln1118_2_fu_652_p2(25 downto 10);

    res_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            res_2_V_ap_vld <= ap_const_logic_1;
        else 
            res_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_498_p2 <= std_logic_vector(unsigned(rhs_V_fu_494_p1) + unsigned(lhs_V_fu_490_p1));
    ret_V_fu_484_p2 <= std_logic_vector(unsigned(zext_ln36_2_fu_480_p1) + unsigned(zext_ln36_1_fu_476_p1));
    rhs_V_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q2),19));
    select_ln340_2_fu_404_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_4_fu_281_p2(0) = '1') else 
        tmp_2_fu_394_p4;
    select_ln340_4_fu_443_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_5_fu_337_p2(0) = '1') else 
        tmp_4_fu_433_p4;
    select_ln340_6_fu_566_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_6_fu_538_p2(0) = '1') else 
        tmp_6_fu_556_p4;
    select_ln340_fu_365_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_3_fu_225_p2(0) = '1') else 
        tmp_fu_355_p4;
    select_ln388_1_fu_412_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_275_p2(0) = '1') else 
        tmp_2_fu_394_p4;
    select_ln388_2_fu_451_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_331_p2(0) = '1') else 
        tmp_4_fu_433_p4;
    select_ln388_3_fu_574_p3 <= 
        ap_const_lv10_200 when (underflow_fu_532_p2(0) = '1') else 
        tmp_6_fu_556_p4;
    select_ln388_fu_373_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_219_p2(0) = '1') else 
        tmp_fu_355_p4;
    select_ln65_fu_161_p1 <= data_1_V_read;
    select_ln65_fu_161_p2 <= data_0_V_read;
    select_ln65_fu_161_p3 <= 
        select_ln65_fu_161_p1 when (icmp_ln1496_fu_155_p2(0) = '1') else 
        select_ln65_fu_161_p2;
        sext_ln1116_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table2_q0),26));

        sext_ln703_1_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_175_p3),17));

    sext_ln703_2_fu_243_p0 <= data_1_V_read;
        sext_ln703_2_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2_fu_243_p0),17));

    sext_ln703_3_fu_299_p0 <= data_2_V_read;
        sext_ln703_3_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_3_fu_299_p0),17));

    sext_ln703_fu_183_p0 <= data_0_V_read;
        sext_ln703_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_183_p0),17));

    sub_ln1193_1_fu_247_p2 <= std_logic_vector(signed(sext_ln703_2_fu_243_p1) - signed(sext_ln703_1_fu_187_p1));
    sub_ln1193_2_fu_303_p2 <= std_logic_vector(signed(sext_ln703_3_fu_299_p1) - signed(sext_ln703_1_fu_187_p1));
    sub_ln1193_fu_191_p2 <= std_logic_vector(signed(sext_ln703_fu_183_p1) - signed(sext_ln703_1_fu_187_p1));
    tmp_2_fu_394_p4 <= sub_ln1193_1_fu_247_p2(15 downto 6);
    tmp_359_fu_197_p3 <= sub_ln1193_fu_191_p2(16 downto 16);
    tmp_360_fu_205_p3 <= sub_ln1193_fu_191_p2(15 downto 15);
    tmp_361_fu_253_p3 <= sub_ln1193_1_fu_247_p2(16 downto 16);
    tmp_362_fu_261_p3 <= sub_ln1193_1_fu_247_p2(15 downto 15);
    tmp_363_fu_309_p3 <= sub_ln1193_2_fu_303_p2(16 downto 16);
    tmp_364_fu_317_p3 <= sub_ln1193_2_fu_303_p2(15 downto 15);
    tmp_4_fu_433_p4 <= sub_ln1193_2_fu_303_p2(15 downto 6);
    tmp_6_fu_556_p4 <= p_Val2_9_fu_512_p2(17 downto 8);
    tmp_fu_355_p4 <= sub_ln1193_fu_191_p2(15 downto 6);
    underflow_fu_532_p2 <= (xor_ln786_3_fu_526_p2 and p_Result_s_fu_504_p3);
    x_max_V_fu_175_p1 <= data_2_V_read;
    x_max_V_fu_175_p3 <= 
        x_max_V_fu_175_p1 when (icmp_ln1496_1_fu_169_p2(0) = '1') else 
        select_ln65_fu_161_p3;
    xor_ln340_1_fu_287_p2 <= (tmp_361_fu_253_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_343_p2 <= (tmp_363_fu_309_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_225_p2 <= (tmp_360_fu_205_p3 xor tmp_359_fu_197_p3);
    xor_ln340_4_fu_281_p2 <= (tmp_362_fu_261_p3 xor tmp_361_fu_253_p3);
    xor_ln340_5_fu_337_p2 <= (tmp_364_fu_317_p3 xor tmp_363_fu_309_p3);
    xor_ln340_6_fu_538_p2 <= (p_Result_s_fu_504_p3 xor p_Result_7_fu_518_p3);
    xor_ln340_7_fu_544_p2 <= (p_Result_s_fu_504_p3 xor ap_const_lv1_1);
    xor_ln340_fu_231_p2 <= (tmp_359_fu_197_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_269_p2 <= (tmp_362_fu_261_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_325_p2 <= (tmp_364_fu_317_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_526_p2 <= (p_Result_7_fu_518_p3 xor ap_const_lv1_1);
    xor_ln786_fu_213_p2 <= (tmp_360_fu_205_p3 xor ap_const_lv1_1);
    y_V_1_fu_420_p3 <= 
        select_ln340_2_fu_404_p3 when (or_ln340_1_fu_293_p2(0) = '1') else 
        select_ln388_1_fu_412_p3;
    y_V_2_fu_459_p3 <= 
        select_ln340_4_fu_443_p3 when (or_ln340_2_fu_349_p2(0) = '1') else 
        select_ln388_2_fu_451_p3;
    y_V_3_fu_582_p3 <= 
        select_ln340_6_fu_566_p3 when (or_ln340_3_fu_550_p2(0) = '1') else 
        select_ln388_3_fu_574_p3;
    y_V_fu_381_p3 <= 
        select_ln340_fu_365_p3 when (or_ln340_fu_237_p2(0) = '1') else 
        select_ln388_fu_373_p3;
    zext_ln255_1_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_fu_420_p3),64));
    zext_ln255_2_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_fu_459_p3),64));
    zext_ln255_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_381_p3),64));
    zext_ln265_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_fu_582_p3),64));
    zext_ln36_1_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q1),18));
    zext_ln36_2_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q0),18));
    zext_ln36_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q2),18));
end behav;
