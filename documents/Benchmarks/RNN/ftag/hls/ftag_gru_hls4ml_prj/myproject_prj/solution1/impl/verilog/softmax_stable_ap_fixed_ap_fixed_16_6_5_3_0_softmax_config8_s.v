// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
output  [15:0] res_0_V;
output   res_0_V_ap_vld;
output  [15:0] res_1_V;
output   res_1_V_ap_vld;
output  [15:0] res_2_V;
output   res_2_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_0_V_ap_vld;
reg res_1_V_ap_vld;
reg res_2_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [16:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [16:0] exp_table1_q2;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
reg   [16:0] exp_res_0_V_reg_674;
reg   [16:0] exp_res_1_V_reg_679;
reg   [16:0] exp_res_2_V_reg_684;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln255_fu_389_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln255_1_fu_428_p1;
wire   [63:0] zext_ln255_2_fu_467_p1;
wire   [63:0] zext_ln265_fu_590_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [15:0] icmp_ln1496_fu_155_p0;
wire  signed [15:0] icmp_ln1496_fu_155_p1;
wire   [0:0] icmp_ln1496_fu_155_p2;
wire  signed [15:0] select_ln65_fu_161_p1;
wire  signed [15:0] select_ln65_fu_161_p2;
wire   [15:0] select_ln65_fu_161_p3;
wire  signed [15:0] icmp_ln1496_1_fu_169_p1;
wire   [0:0] icmp_ln1496_1_fu_169_p2;
wire  signed [15:0] x_max_V_fu_175_p1;
wire  signed [15:0] sext_ln703_fu_183_p0;
wire   [15:0] x_max_V_fu_175_p3;
wire  signed [16:0] sext_ln703_fu_183_p1;
wire  signed [16:0] sext_ln703_1_fu_187_p1;
wire   [16:0] sub_ln1193_fu_191_p2;
wire   [0:0] tmp_360_fu_205_p3;
wire   [0:0] tmp_359_fu_197_p3;
wire   [0:0] xor_ln786_fu_213_p2;
wire   [0:0] xor_ln340_fu_231_p2;
wire  signed [15:0] sext_ln703_2_fu_243_p0;
wire  signed [16:0] sext_ln703_2_fu_243_p1;
wire   [16:0] sub_ln1193_1_fu_247_p2;
wire   [0:0] tmp_362_fu_261_p3;
wire   [0:0] tmp_361_fu_253_p3;
wire   [0:0] xor_ln786_1_fu_269_p2;
wire   [0:0] xor_ln340_1_fu_287_p2;
wire  signed [15:0] sext_ln703_3_fu_299_p0;
wire  signed [16:0] sext_ln703_3_fu_299_p1;
wire   [16:0] sub_ln1193_2_fu_303_p2;
wire   [0:0] tmp_364_fu_317_p3;
wire   [0:0] tmp_363_fu_309_p3;
wire   [0:0] xor_ln786_2_fu_325_p2;
wire   [0:0] xor_ln340_2_fu_343_p2;
wire   [0:0] xor_ln340_3_fu_225_p2;
wire   [9:0] tmp_fu_355_p4;
wire   [0:0] and_ln786_fu_219_p2;
wire   [0:0] or_ln340_fu_237_p2;
wire   [9:0] select_ln340_fu_365_p3;
wire   [9:0] select_ln388_fu_373_p3;
wire   [9:0] y_V_fu_381_p3;
wire   [0:0] xor_ln340_4_fu_281_p2;
wire   [9:0] tmp_2_fu_394_p4;
wire   [0:0] and_ln786_1_fu_275_p2;
wire   [0:0] or_ln340_1_fu_293_p2;
wire   [9:0] select_ln340_2_fu_404_p3;
wire   [9:0] select_ln388_1_fu_412_p3;
wire   [9:0] y_V_1_fu_420_p3;
wire   [0:0] xor_ln340_5_fu_337_p2;
wire   [9:0] tmp_4_fu_433_p4;
wire   [0:0] and_ln786_2_fu_331_p2;
wire   [0:0] or_ln340_2_fu_349_p2;
wire   [9:0] select_ln340_4_fu_443_p3;
wire   [9:0] select_ln388_2_fu_451_p3;
wire   [9:0] y_V_2_fu_459_p3;
wire   [17:0] zext_ln36_2_fu_480_p1;
wire   [17:0] zext_ln36_1_fu_476_p1;
wire  signed [17:0] ret_V_fu_484_p2;
wire   [18:0] rhs_V_fu_494_p1;
wire  signed [18:0] lhs_V_fu_490_p1;
wire   [18:0] ret_V_1_fu_498_p2;
wire   [17:0] zext_ln36_fu_472_p1;
wire   [17:0] p_Val2_9_fu_512_p2;
wire   [0:0] p_Result_7_fu_518_p3;
wire   [0:0] p_Result_s_fu_504_p3;
wire   [0:0] xor_ln786_3_fu_526_p2;
wire   [0:0] xor_ln340_7_fu_544_p2;
wire   [0:0] xor_ln340_6_fu_538_p2;
wire   [9:0] tmp_6_fu_556_p4;
wire   [0:0] underflow_fu_532_p2;
wire   [0:0] or_ln340_3_fu_550_p2;
wire   [9:0] select_ln340_6_fu_566_p3;
wire   [9:0] select_ln388_3_fu_574_p3;
wire   [9:0] y_V_3_fu_582_p3;
wire  signed [25:0] mul_ln1118_fu_638_p2;
wire  signed [25:0] mul_ln1118_1_fu_645_p2;
wire  signed [25:0] mul_ln1118_2_fu_652_p2;
wire   [16:0] mul_ln1118_fu_638_p0;
wire  signed [17:0] mul_ln1118_fu_638_p1;
wire  signed [25:0] sext_ln1116_fu_595_p1;
wire   [16:0] mul_ln1118_1_fu_645_p0;
wire  signed [17:0] mul_ln1118_1_fu_645_p1;
wire   [16:0] mul_ln1118_2_fu_652_p0;
wire  signed [17:0] mul_ln1118_2_fu_652_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] mul_ln1118_1_fu_645_p00;
wire   [25:0] mul_ln1118_2_fu_652_p00;
wire   [25:0] mul_ln1118_fu_638_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s_exp_table1 #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2)
);

softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s_invert_table2 #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U4517(
    .din0(mul_ln1118_fu_638_p0),
    .din1(mul_ln1118_fu_638_p1),
    .dout(mul_ln1118_fu_638_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U4518(
    .din0(mul_ln1118_1_fu_645_p0),
    .din1(mul_ln1118_1_fu_645_p1),
    .dout(mul_ln1118_1_fu_645_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U4519(
    .din0(mul_ln1118_2_fu_652_p0),
    .din1(mul_ln1118_2_fu_652_p1),
    .dout(mul_ln1118_2_fu_652_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_res_0_V_reg_674 <= exp_table1_q0;
        exp_res_1_V_reg_679 <= exp_table1_q1;
        exp_res_2_V_reg_684 <= exp_table1_q2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln786_1_fu_275_p2 = (xor_ln786_1_fu_269_p2 & tmp_361_fu_253_p3);

assign and_ln786_2_fu_331_p2 = (xor_ln786_2_fu_325_p2 & tmp_363_fu_309_p3);

assign and_ln786_fu_219_p2 = (xor_ln786_fu_213_p2 & tmp_359_fu_197_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_table1_address0 = zext_ln255_fu_389_p1;

assign exp_table1_address1 = zext_ln255_1_fu_428_p1;

assign exp_table1_address2 = zext_ln255_2_fu_467_p1;

assign icmp_ln1496_1_fu_169_p1 = data_2_V_read;

assign icmp_ln1496_1_fu_169_p2 = (($signed(select_ln65_fu_161_p3) < $signed(icmp_ln1496_1_fu_169_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_155_p0 = data_0_V_read;

assign icmp_ln1496_fu_155_p1 = data_1_V_read;

assign icmp_ln1496_fu_155_p2 = (($signed(icmp_ln1496_fu_155_p0) < $signed(icmp_ln1496_fu_155_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln265_fu_590_p1;

assign lhs_V_fu_490_p1 = ret_V_fu_484_p2;

assign mul_ln1118_1_fu_645_p0 = mul_ln1118_1_fu_645_p00;

assign mul_ln1118_1_fu_645_p00 = exp_res_1_V_reg_679;

assign mul_ln1118_1_fu_645_p1 = sext_ln1116_fu_595_p1;

assign mul_ln1118_2_fu_652_p0 = mul_ln1118_2_fu_652_p00;

assign mul_ln1118_2_fu_652_p00 = exp_res_2_V_reg_684;

assign mul_ln1118_2_fu_652_p1 = sext_ln1116_fu_595_p1;

assign mul_ln1118_fu_638_p0 = mul_ln1118_fu_638_p00;

assign mul_ln1118_fu_638_p00 = exp_res_0_V_reg_674;

assign mul_ln1118_fu_638_p1 = sext_ln1116_fu_595_p1;

assign or_ln340_1_fu_293_p2 = (xor_ln340_1_fu_287_p2 | tmp_362_fu_261_p3);

assign or_ln340_2_fu_349_p2 = (xor_ln340_2_fu_343_p2 | tmp_364_fu_317_p3);

assign or_ln340_3_fu_550_p2 = (xor_ln340_7_fu_544_p2 | p_Result_7_fu_518_p3);

assign or_ln340_fu_237_p2 = (xor_ln340_fu_231_p2 | tmp_360_fu_205_p3);

assign p_Result_7_fu_518_p3 = p_Val2_9_fu_512_p2[32'd17];

assign p_Result_s_fu_504_p3 = ret_V_1_fu_498_p2[32'd18];

assign p_Val2_9_fu_512_p2 = ($signed(zext_ln36_fu_472_p1) + $signed(ret_V_fu_484_p2));

assign res_0_V = {{mul_ln1118_fu_638_p2[25:10]}};

assign res_1_V = {{mul_ln1118_1_fu_645_p2[25:10]}};

assign res_2_V = {{mul_ln1118_2_fu_652_p2[25:10]}};

assign ret_V_1_fu_498_p2 = ($signed(rhs_V_fu_494_p1) + $signed(lhs_V_fu_490_p1));

assign ret_V_fu_484_p2 = (zext_ln36_2_fu_480_p1 + zext_ln36_1_fu_476_p1);

assign rhs_V_fu_494_p1 = exp_table1_q2;

assign select_ln340_2_fu_404_p3 = ((xor_ln340_4_fu_281_p2[0:0] === 1'b1) ? 10'd511 : tmp_2_fu_394_p4);

assign select_ln340_4_fu_443_p3 = ((xor_ln340_5_fu_337_p2[0:0] === 1'b1) ? 10'd511 : tmp_4_fu_433_p4);

assign select_ln340_6_fu_566_p3 = ((xor_ln340_6_fu_538_p2[0:0] === 1'b1) ? 10'd511 : tmp_6_fu_556_p4);

assign select_ln340_fu_365_p3 = ((xor_ln340_3_fu_225_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_355_p4);

assign select_ln388_1_fu_412_p3 = ((and_ln786_1_fu_275_p2[0:0] === 1'b1) ? 10'd512 : tmp_2_fu_394_p4);

assign select_ln388_2_fu_451_p3 = ((and_ln786_2_fu_331_p2[0:0] === 1'b1) ? 10'd512 : tmp_4_fu_433_p4);

assign select_ln388_3_fu_574_p3 = ((underflow_fu_532_p2[0:0] === 1'b1) ? 10'd512 : tmp_6_fu_556_p4);

assign select_ln388_fu_373_p3 = ((and_ln786_fu_219_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_355_p4);

assign select_ln65_fu_161_p1 = data_1_V_read;

assign select_ln65_fu_161_p2 = data_0_V_read;

assign select_ln65_fu_161_p3 = ((icmp_ln1496_fu_155_p2[0:0] === 1'b1) ? select_ln65_fu_161_p1 : select_ln65_fu_161_p2);

assign sext_ln1116_fu_595_p1 = $signed(invert_table2_q0);

assign sext_ln703_1_fu_187_p1 = $signed(x_max_V_fu_175_p3);

assign sext_ln703_2_fu_243_p0 = data_1_V_read;

assign sext_ln703_2_fu_243_p1 = sext_ln703_2_fu_243_p0;

assign sext_ln703_3_fu_299_p0 = data_2_V_read;

assign sext_ln703_3_fu_299_p1 = sext_ln703_3_fu_299_p0;

assign sext_ln703_fu_183_p0 = data_0_V_read;

assign sext_ln703_fu_183_p1 = sext_ln703_fu_183_p0;

assign sub_ln1193_1_fu_247_p2 = ($signed(sext_ln703_2_fu_243_p1) - $signed(sext_ln703_1_fu_187_p1));

assign sub_ln1193_2_fu_303_p2 = ($signed(sext_ln703_3_fu_299_p1) - $signed(sext_ln703_1_fu_187_p1));

assign sub_ln1193_fu_191_p2 = ($signed(sext_ln703_fu_183_p1) - $signed(sext_ln703_1_fu_187_p1));

assign tmp_2_fu_394_p4 = {{sub_ln1193_1_fu_247_p2[15:6]}};

assign tmp_359_fu_197_p3 = sub_ln1193_fu_191_p2[32'd16];

assign tmp_360_fu_205_p3 = sub_ln1193_fu_191_p2[32'd15];

assign tmp_361_fu_253_p3 = sub_ln1193_1_fu_247_p2[32'd16];

assign tmp_362_fu_261_p3 = sub_ln1193_1_fu_247_p2[32'd15];

assign tmp_363_fu_309_p3 = sub_ln1193_2_fu_303_p2[32'd16];

assign tmp_364_fu_317_p3 = sub_ln1193_2_fu_303_p2[32'd15];

assign tmp_4_fu_433_p4 = {{sub_ln1193_2_fu_303_p2[15:6]}};

assign tmp_6_fu_556_p4 = {{p_Val2_9_fu_512_p2[17:8]}};

assign tmp_fu_355_p4 = {{sub_ln1193_fu_191_p2[15:6]}};

assign underflow_fu_532_p2 = (xor_ln786_3_fu_526_p2 & p_Result_s_fu_504_p3);

assign x_max_V_fu_175_p1 = data_2_V_read;

assign x_max_V_fu_175_p3 = ((icmp_ln1496_1_fu_169_p2[0:0] === 1'b1) ? x_max_V_fu_175_p1 : select_ln65_fu_161_p3);

assign xor_ln340_1_fu_287_p2 = (tmp_361_fu_253_p3 ^ 1'd1);

assign xor_ln340_2_fu_343_p2 = (tmp_363_fu_309_p3 ^ 1'd1);

assign xor_ln340_3_fu_225_p2 = (tmp_360_fu_205_p3 ^ tmp_359_fu_197_p3);

assign xor_ln340_4_fu_281_p2 = (tmp_362_fu_261_p3 ^ tmp_361_fu_253_p3);

assign xor_ln340_5_fu_337_p2 = (tmp_364_fu_317_p3 ^ tmp_363_fu_309_p3);

assign xor_ln340_6_fu_538_p2 = (p_Result_s_fu_504_p3 ^ p_Result_7_fu_518_p3);

assign xor_ln340_7_fu_544_p2 = (p_Result_s_fu_504_p3 ^ 1'd1);

assign xor_ln340_fu_231_p2 = (tmp_359_fu_197_p3 ^ 1'd1);

assign xor_ln786_1_fu_269_p2 = (tmp_362_fu_261_p3 ^ 1'd1);

assign xor_ln786_2_fu_325_p2 = (tmp_364_fu_317_p3 ^ 1'd1);

assign xor_ln786_3_fu_526_p2 = (p_Result_7_fu_518_p3 ^ 1'd1);

assign xor_ln786_fu_213_p2 = (tmp_360_fu_205_p3 ^ 1'd1);

assign y_V_1_fu_420_p3 = ((or_ln340_1_fu_293_p2[0:0] === 1'b1) ? select_ln340_2_fu_404_p3 : select_ln388_1_fu_412_p3);

assign y_V_2_fu_459_p3 = ((or_ln340_2_fu_349_p2[0:0] === 1'b1) ? select_ln340_4_fu_443_p3 : select_ln388_2_fu_451_p3);

assign y_V_3_fu_582_p3 = ((or_ln340_3_fu_550_p2[0:0] === 1'b1) ? select_ln340_6_fu_566_p3 : select_ln388_3_fu_574_p3);

assign y_V_fu_381_p3 = ((or_ln340_fu_237_p2[0:0] === 1'b1) ? select_ln340_fu_365_p3 : select_ln388_fu_373_p3);

assign zext_ln255_1_fu_428_p1 = y_V_1_fu_420_p3;

assign zext_ln255_2_fu_467_p1 = y_V_2_fu_459_p3;

assign zext_ln255_fu_389_p1 = y_V_fu_381_p3;

assign zext_ln265_fu_590_p1 = y_V_3_fu_582_p3;

assign zext_ln36_1_fu_476_p1 = exp_table1_q1;

assign zext_ln36_2_fu_480_p1 = exp_table1_q0;

assign zext_ln36_fu_472_p1 = exp_table1_q2;

endmodule //softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config8_s
