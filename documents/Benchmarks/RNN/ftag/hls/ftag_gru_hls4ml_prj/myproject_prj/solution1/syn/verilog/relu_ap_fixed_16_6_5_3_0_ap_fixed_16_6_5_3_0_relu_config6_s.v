// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config6_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        data_5_V_read,
        data_6_V_read,
        data_7_V_read,
        data_8_V_read,
        data_9_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
input  [15:0] data_4_V_read;
input  [15:0] data_5_V_read;
input  [15:0] data_6_V_read;
input  [15:0] data_7_V_read;
input  [15:0] data_8_V_read;
input  [15:0] data_9_V_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;
output  [15:0] ap_return_5;
output  [15:0] ap_return_6;
output  [15:0] ap_return_7;
output  [15:0] ap_return_8;
output  [15:0] ap_return_9;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return_0;
reg[15:0] ap_return_1;
reg[15:0] ap_return_2;
reg[15:0] ap_return_3;
reg[15:0] ap_return_4;
reg[15:0] ap_return_5;
reg[15:0] ap_return_6;
reg[15:0] ap_return_7;
reg[15:0] ap_return_8;
reg[15:0] ap_return_9;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [0:0] icmp_ln1494_fu_102_p2;
wire   [14:0] trunc_ln1494_fu_98_p1;
wire   [14:0] select_ln45_fu_108_p3;
wire   [0:0] icmp_ln1494_1_fu_124_p2;
wire   [14:0] trunc_ln1494_1_fu_120_p1;
wire   [14:0] select_ln45_1_fu_130_p3;
wire   [0:0] icmp_ln1494_2_fu_146_p2;
wire   [14:0] trunc_ln1494_2_fu_142_p1;
wire   [14:0] select_ln45_2_fu_152_p3;
wire   [0:0] icmp_ln1494_3_fu_168_p2;
wire   [14:0] trunc_ln1494_3_fu_164_p1;
wire   [14:0] select_ln45_3_fu_174_p3;
wire   [0:0] icmp_ln1494_4_fu_190_p2;
wire   [14:0] trunc_ln1494_4_fu_186_p1;
wire   [14:0] select_ln45_4_fu_196_p3;
wire   [0:0] icmp_ln1494_5_fu_212_p2;
wire   [14:0] trunc_ln1494_5_fu_208_p1;
wire   [14:0] select_ln45_5_fu_218_p3;
wire   [0:0] icmp_ln1494_6_fu_234_p2;
wire   [14:0] trunc_ln1494_6_fu_230_p1;
wire   [14:0] select_ln45_6_fu_240_p3;
wire   [0:0] icmp_ln1494_7_fu_256_p2;
wire   [14:0] trunc_ln1494_7_fu_252_p1;
wire   [14:0] select_ln45_7_fu_262_p3;
wire   [0:0] icmp_ln1494_8_fu_278_p2;
wire   [14:0] trunc_ln1494_8_fu_274_p1;
wire   [14:0] select_ln45_8_fu_284_p3;
wire   [0:0] icmp_ln1494_9_fu_300_p2;
wire   [14:0] trunc_ln1494_9_fu_296_p1;
wire   [14:0] select_ln45_9_fu_306_p3;
wire   [15:0] zext_ln45_fu_116_p1;
wire   [15:0] zext_ln45_1_fu_138_p1;
wire   [15:0] zext_ln45_2_fu_160_p1;
wire   [15:0] zext_ln45_3_fu_182_p1;
wire   [15:0] zext_ln45_4_fu_204_p1;
wire   [15:0] zext_ln45_5_fu_226_p1;
wire   [15:0] zext_ln45_6_fu_248_p1;
wire   [15:0] zext_ln45_7_fu_270_p1;
wire   [15:0] zext_ln45_8_fu_292_p1;
wire   [15:0] zext_ln45_9_fu_314_p1;
reg   [15:0] ap_return_0_preg;
reg   [15:0] ap_return_1_preg;
reg   [15:0] ap_return_2_preg;
reg   [15:0] ap_return_3_preg;
reg   [15:0] ap_return_4_preg;
reg   [15:0] ap_return_5_preg;
reg   [15:0] ap_return_6_preg;
reg   [15:0] ap_return_7_preg;
reg   [15:0] ap_return_8_preg;
reg   [15:0] ap_return_9_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 16'd0;
#0 ap_return_1_preg = 16'd0;
#0 ap_return_2_preg = 16'd0;
#0 ap_return_3_preg = 16'd0;
#0 ap_return_4_preg = 16'd0;
#0 ap_return_5_preg = 16'd0;
#0 ap_return_6_preg = 16'd0;
#0 ap_return_7_preg = 16'd0;
#0 ap_return_8_preg = 16'd0;
#0 ap_return_9_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[0] <= 1'b0;
        ap_return_0_preg[1] <= 1'b0;
        ap_return_0_preg[2] <= 1'b0;
        ap_return_0_preg[3] <= 1'b0;
        ap_return_0_preg[4] <= 1'b0;
        ap_return_0_preg[5] <= 1'b0;
        ap_return_0_preg[6] <= 1'b0;
        ap_return_0_preg[7] <= 1'b0;
        ap_return_0_preg[8] <= 1'b0;
        ap_return_0_preg[9] <= 1'b0;
        ap_return_0_preg[10] <= 1'b0;
        ap_return_0_preg[11] <= 1'b0;
        ap_return_0_preg[12] <= 1'b0;
        ap_return_0_preg[13] <= 1'b0;
        ap_return_0_preg[14] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_0_preg[14 : 0] <= zext_ln45_fu_116_p1[14 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[0] <= 1'b0;
        ap_return_1_preg[1] <= 1'b0;
        ap_return_1_preg[2] <= 1'b0;
        ap_return_1_preg[3] <= 1'b0;
        ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
        ap_return_1_preg[8] <= 1'b0;
        ap_return_1_preg[9] <= 1'b0;
        ap_return_1_preg[10] <= 1'b0;
        ap_return_1_preg[11] <= 1'b0;
        ap_return_1_preg[12] <= 1'b0;
        ap_return_1_preg[13] <= 1'b0;
        ap_return_1_preg[14] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_1_preg[14 : 0] <= zext_ln45_1_fu_138_p1[14 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_2_preg[0] <= 1'b0;
        ap_return_2_preg[1] <= 1'b0;
        ap_return_2_preg[2] <= 1'b0;
        ap_return_2_preg[3] <= 1'b0;
        ap_return_2_preg[4] <= 1'b0;
        ap_return_2_preg[5] <= 1'b0;
        ap_return_2_preg[6] <= 1'b0;
        ap_return_2_preg[7] <= 1'b0;
        ap_return_2_preg[8] <= 1'b0;
        ap_return_2_preg[9] <= 1'b0;
        ap_return_2_preg[10] <= 1'b0;
        ap_return_2_preg[11] <= 1'b0;
        ap_return_2_preg[12] <= 1'b0;
        ap_return_2_preg[13] <= 1'b0;
        ap_return_2_preg[14] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_2_preg[14 : 0] <= zext_ln45_2_fu_160_p1[14 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_3_preg[0] <= 1'b0;
        ap_return_3_preg[1] <= 1'b0;
        ap_return_3_preg[2] <= 1'b0;
        ap_return_3_preg[3] <= 1'b0;
        ap_return_3_preg[4] <= 1'b0;
        ap_return_3_preg[5] <= 1'b0;
        ap_return_3_preg[6] <= 1'b0;
        ap_return_3_preg[7] <= 1'b0;
        ap_return_3_preg[8] <= 1'b0;
        ap_return_3_preg[9] <= 1'b0;
        ap_return_3_preg[10] <= 1'b0;
        ap_return_3_preg[11] <= 1'b0;
        ap_return_3_preg[12] <= 1'b0;
        ap_return_3_preg[13] <= 1'b0;
        ap_return_3_preg[14] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_3_preg[14 : 0] <= zext_ln45_3_fu_182_p1[14 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_4_preg[0] <= 1'b0;
        ap_return_4_preg[1] <= 1'b0;
        ap_return_4_preg[2] <= 1'b0;
        ap_return_4_preg[3] <= 1'b0;
        ap_return_4_preg[4] <= 1'b0;
        ap_return_4_preg[5] <= 1'b0;
        ap_return_4_preg[6] <= 1'b0;
        ap_return_4_preg[7] <= 1'b0;
        ap_return_4_preg[8] <= 1'b0;
        ap_return_4_preg[9] <= 1'b0;
        ap_return_4_preg[10] <= 1'b0;
        ap_return_4_preg[11] <= 1'b0;
        ap_return_4_preg[12] <= 1'b0;
        ap_return_4_preg[13] <= 1'b0;
        ap_return_4_preg[14] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_4_preg[14 : 0] <= zext_ln45_4_fu_204_p1[14 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_5_preg[0] <= 1'b0;
        ap_return_5_preg[1] <= 1'b0;
        ap_return_5_preg[2] <= 1'b0;
        ap_return_5_preg[3] <= 1'b0;
        ap_return_5_preg[4] <= 1'b0;
        ap_return_5_preg[5] <= 1'b0;
        ap_return_5_preg[6] <= 1'b0;
        ap_return_5_preg[7] <= 1'b0;
        ap_return_5_preg[8] <= 1'b0;
        ap_return_5_preg[9] <= 1'b0;
        ap_return_5_preg[10] <= 1'b0;
        ap_return_5_preg[11] <= 1'b0;
        ap_return_5_preg[12] <= 1'b0;
        ap_return_5_preg[13] <= 1'b0;
        ap_return_5_preg[14] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_5_preg[14 : 0] <= zext_ln45_5_fu_226_p1[14 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_6_preg[0] <= 1'b0;
        ap_return_6_preg[1] <= 1'b0;
        ap_return_6_preg[2] <= 1'b0;
        ap_return_6_preg[3] <= 1'b0;
        ap_return_6_preg[4] <= 1'b0;
        ap_return_6_preg[5] <= 1'b0;
        ap_return_6_preg[6] <= 1'b0;
        ap_return_6_preg[7] <= 1'b0;
        ap_return_6_preg[8] <= 1'b0;
        ap_return_6_preg[9] <= 1'b0;
        ap_return_6_preg[10] <= 1'b0;
        ap_return_6_preg[11] <= 1'b0;
        ap_return_6_preg[12] <= 1'b0;
        ap_return_6_preg[13] <= 1'b0;
        ap_return_6_preg[14] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_6_preg[14 : 0] <= zext_ln45_6_fu_248_p1[14 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_7_preg[0] <= 1'b0;
        ap_return_7_preg[1] <= 1'b0;
        ap_return_7_preg[2] <= 1'b0;
        ap_return_7_preg[3] <= 1'b0;
        ap_return_7_preg[4] <= 1'b0;
        ap_return_7_preg[5] <= 1'b0;
        ap_return_7_preg[6] <= 1'b0;
        ap_return_7_preg[7] <= 1'b0;
        ap_return_7_preg[8] <= 1'b0;
        ap_return_7_preg[9] <= 1'b0;
        ap_return_7_preg[10] <= 1'b0;
        ap_return_7_preg[11] <= 1'b0;
        ap_return_7_preg[12] <= 1'b0;
        ap_return_7_preg[13] <= 1'b0;
        ap_return_7_preg[14] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_7_preg[14 : 0] <= zext_ln45_7_fu_270_p1[14 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_8_preg[0] <= 1'b0;
        ap_return_8_preg[1] <= 1'b0;
        ap_return_8_preg[2] <= 1'b0;
        ap_return_8_preg[3] <= 1'b0;
        ap_return_8_preg[4] <= 1'b0;
        ap_return_8_preg[5] <= 1'b0;
        ap_return_8_preg[6] <= 1'b0;
        ap_return_8_preg[7] <= 1'b0;
        ap_return_8_preg[8] <= 1'b0;
        ap_return_8_preg[9] <= 1'b0;
        ap_return_8_preg[10] <= 1'b0;
        ap_return_8_preg[11] <= 1'b0;
        ap_return_8_preg[12] <= 1'b0;
        ap_return_8_preg[13] <= 1'b0;
        ap_return_8_preg[14] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_8_preg[14 : 0] <= zext_ln45_8_fu_292_p1[14 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_9_preg[0] <= 1'b0;
        ap_return_9_preg[1] <= 1'b0;
        ap_return_9_preg[2] <= 1'b0;
        ap_return_9_preg[3] <= 1'b0;
        ap_return_9_preg[4] <= 1'b0;
        ap_return_9_preg[5] <= 1'b0;
        ap_return_9_preg[6] <= 1'b0;
        ap_return_9_preg[7] <= 1'b0;
        ap_return_9_preg[8] <= 1'b0;
        ap_return_9_preg[9] <= 1'b0;
        ap_return_9_preg[10] <= 1'b0;
        ap_return_9_preg[11] <= 1'b0;
        ap_return_9_preg[12] <= 1'b0;
        ap_return_9_preg[13] <= 1'b0;
        ap_return_9_preg[14] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_9_preg[14 : 0] <= zext_ln45_9_fu_314_p1[14 : 0];
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = zext_ln45_fu_116_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = zext_ln45_1_fu_138_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = zext_ln45_2_fu_160_p1;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = zext_ln45_3_fu_182_p1;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_4 = zext_ln45_4_fu_204_p1;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_5 = zext_ln45_5_fu_226_p1;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_6 = zext_ln45_6_fu_248_p1;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_7 = zext_ln45_7_fu_270_p1;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_8 = zext_ln45_8_fu_292_p1;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_9 = zext_ln45_9_fu_314_p1;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln1494_1_fu_124_p2 = (($signed(data_1_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_146_p2 = (($signed(data_2_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_168_p2 = (($signed(data_3_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_190_p2 = (($signed(data_4_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_212_p2 = (($signed(data_5_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_234_p2 = (($signed(data_6_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_256_p2 = (($signed(data_7_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_278_p2 = (($signed(data_8_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_300_p2 = (($signed(data_9_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_102_p2 = (($signed(data_0_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign select_ln45_1_fu_130_p3 = ((icmp_ln1494_1_fu_124_p2[0:0] === 1'b1) ? trunc_ln1494_1_fu_120_p1 : 15'd0);

assign select_ln45_2_fu_152_p3 = ((icmp_ln1494_2_fu_146_p2[0:0] === 1'b1) ? trunc_ln1494_2_fu_142_p1 : 15'd0);

assign select_ln45_3_fu_174_p3 = ((icmp_ln1494_3_fu_168_p2[0:0] === 1'b1) ? trunc_ln1494_3_fu_164_p1 : 15'd0);

assign select_ln45_4_fu_196_p3 = ((icmp_ln1494_4_fu_190_p2[0:0] === 1'b1) ? trunc_ln1494_4_fu_186_p1 : 15'd0);

assign select_ln45_5_fu_218_p3 = ((icmp_ln1494_5_fu_212_p2[0:0] === 1'b1) ? trunc_ln1494_5_fu_208_p1 : 15'd0);

assign select_ln45_6_fu_240_p3 = ((icmp_ln1494_6_fu_234_p2[0:0] === 1'b1) ? trunc_ln1494_6_fu_230_p1 : 15'd0);

assign select_ln45_7_fu_262_p3 = ((icmp_ln1494_7_fu_256_p2[0:0] === 1'b1) ? trunc_ln1494_7_fu_252_p1 : 15'd0);

assign select_ln45_8_fu_284_p3 = ((icmp_ln1494_8_fu_278_p2[0:0] === 1'b1) ? trunc_ln1494_8_fu_274_p1 : 15'd0);

assign select_ln45_9_fu_306_p3 = ((icmp_ln1494_9_fu_300_p2[0:0] === 1'b1) ? trunc_ln1494_9_fu_296_p1 : 15'd0);

assign select_ln45_fu_108_p3 = ((icmp_ln1494_fu_102_p2[0:0] === 1'b1) ? trunc_ln1494_fu_98_p1 : 15'd0);

assign trunc_ln1494_1_fu_120_p1 = data_1_V_read[14:0];

assign trunc_ln1494_2_fu_142_p1 = data_2_V_read[14:0];

assign trunc_ln1494_3_fu_164_p1 = data_3_V_read[14:0];

assign trunc_ln1494_4_fu_186_p1 = data_4_V_read[14:0];

assign trunc_ln1494_5_fu_208_p1 = data_5_V_read[14:0];

assign trunc_ln1494_6_fu_230_p1 = data_6_V_read[14:0];

assign trunc_ln1494_7_fu_252_p1 = data_7_V_read[14:0];

assign trunc_ln1494_8_fu_274_p1 = data_8_V_read[14:0];

assign trunc_ln1494_9_fu_296_p1 = data_9_V_read[14:0];

assign trunc_ln1494_fu_98_p1 = data_0_V_read[14:0];

assign zext_ln45_1_fu_138_p1 = select_ln45_1_fu_130_p3;

assign zext_ln45_2_fu_160_p1 = select_ln45_2_fu_152_p3;

assign zext_ln45_3_fu_182_p1 = select_ln45_3_fu_174_p3;

assign zext_ln45_4_fu_204_p1 = select_ln45_4_fu_196_p3;

assign zext_ln45_5_fu_226_p1 = select_ln45_5_fu_218_p3;

assign zext_ln45_6_fu_248_p1 = select_ln45_6_fu_240_p3;

assign zext_ln45_7_fu_270_p1 = select_ln45_7_fu_262_p3;

assign zext_ln45_8_fu_292_p1 = select_ln45_8_fu_284_p3;

assign zext_ln45_9_fu_314_p1 = select_ln45_9_fu_306_p3;

assign zext_ln45_fu_116_p1 = select_ln45_fu_108_p3;

always @ (posedge ap_clk) begin
    ap_return_0_preg[15] <= 1'b0;
    ap_return_1_preg[15] <= 1'b0;
    ap_return_2_preg[15] <= 1'b0;
    ap_return_3_preg[15] <= 1'b0;
    ap_return_4_preg[15] <= 1'b0;
    ap_return_5_preg[15] <= 1'b0;
    ap_return_6_preg[15] <= 1'b0;
    ap_return_7_preg[15] <= 1'b0;
    ap_return_8_preg[15] <= 1'b0;
    ap_return_9_preg[15] <= 1'b0;
end

endmodule //relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config6_s
