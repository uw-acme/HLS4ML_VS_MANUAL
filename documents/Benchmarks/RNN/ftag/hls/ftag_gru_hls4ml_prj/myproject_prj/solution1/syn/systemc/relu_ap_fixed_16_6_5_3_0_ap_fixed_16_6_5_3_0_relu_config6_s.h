// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config6_s_HH_
#define _relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config6_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config6_s : public sc_module {
    // Port declarations 27
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > data_0_V_read;
    sc_in< sc_lv<16> > data_1_V_read;
    sc_in< sc_lv<16> > data_2_V_read;
    sc_in< sc_lv<16> > data_3_V_read;
    sc_in< sc_lv<16> > data_4_V_read;
    sc_in< sc_lv<16> > data_5_V_read;
    sc_in< sc_lv<16> > data_6_V_read;
    sc_in< sc_lv<16> > data_7_V_read;
    sc_in< sc_lv<16> > data_8_V_read;
    sc_in< sc_lv<16> > data_9_V_read;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<16> > ap_return_1;
    sc_out< sc_lv<16> > ap_return_2;
    sc_out< sc_lv<16> > ap_return_3;
    sc_out< sc_lv<16> > ap_return_4;
    sc_out< sc_lv<16> > ap_return_5;
    sc_out< sc_lv<16> > ap_return_6;
    sc_out< sc_lv<16> > ap_return_7;
    sc_out< sc_lv<16> > ap_return_8;
    sc_out< sc_lv<16> > ap_return_9;


    // Module declarations
    relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config6_s(sc_module_name name);
    SC_HAS_PROCESS(relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config6_s);

    ~relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config6_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln1494_fu_102_p2;
    sc_signal< sc_lv<15> > trunc_ln1494_fu_98_p1;
    sc_signal< sc_lv<15> > select_ln45_fu_108_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_1_fu_124_p2;
    sc_signal< sc_lv<15> > trunc_ln1494_1_fu_120_p1;
    sc_signal< sc_lv<15> > select_ln45_1_fu_130_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_2_fu_146_p2;
    sc_signal< sc_lv<15> > trunc_ln1494_2_fu_142_p1;
    sc_signal< sc_lv<15> > select_ln45_2_fu_152_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_3_fu_168_p2;
    sc_signal< sc_lv<15> > trunc_ln1494_3_fu_164_p1;
    sc_signal< sc_lv<15> > select_ln45_3_fu_174_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_4_fu_190_p2;
    sc_signal< sc_lv<15> > trunc_ln1494_4_fu_186_p1;
    sc_signal< sc_lv<15> > select_ln45_4_fu_196_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_5_fu_212_p2;
    sc_signal< sc_lv<15> > trunc_ln1494_5_fu_208_p1;
    sc_signal< sc_lv<15> > select_ln45_5_fu_218_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_6_fu_234_p2;
    sc_signal< sc_lv<15> > trunc_ln1494_6_fu_230_p1;
    sc_signal< sc_lv<15> > select_ln45_6_fu_240_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_7_fu_256_p2;
    sc_signal< sc_lv<15> > trunc_ln1494_7_fu_252_p1;
    sc_signal< sc_lv<15> > select_ln45_7_fu_262_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_8_fu_278_p2;
    sc_signal< sc_lv<15> > trunc_ln1494_8_fu_274_p1;
    sc_signal< sc_lv<15> > select_ln45_8_fu_284_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_9_fu_300_p2;
    sc_signal< sc_lv<15> > trunc_ln1494_9_fu_296_p1;
    sc_signal< sc_lv<15> > select_ln45_9_fu_306_p3;
    sc_signal< sc_lv<16> > zext_ln45_fu_116_p1;
    sc_signal< sc_lv<16> > zext_ln45_1_fu_138_p1;
    sc_signal< sc_lv<16> > zext_ln45_2_fu_160_p1;
    sc_signal< sc_lv<16> > zext_ln45_3_fu_182_p1;
    sc_signal< sc_lv<16> > zext_ln45_4_fu_204_p1;
    sc_signal< sc_lv<16> > zext_ln45_5_fu_226_p1;
    sc_signal< sc_lv<16> > zext_ln45_6_fu_248_p1;
    sc_signal< sc_lv<16> > zext_ln45_7_fu_270_p1;
    sc_signal< sc_lv<16> > zext_ln45_8_fu_292_p1;
    sc_signal< sc_lv<16> > zext_ln45_9_fu_314_p1;
    sc_signal< sc_lv<16> > ap_return_0_preg;
    sc_signal< sc_lv<16> > ap_return_1_preg;
    sc_signal< sc_lv<16> > ap_return_2_preg;
    sc_signal< sc_lv<16> > ap_return_3_preg;
    sc_signal< sc_lv<16> > ap_return_4_preg;
    sc_signal< sc_lv<16> > ap_return_5_preg;
    sc_signal< sc_lv<16> > ap_return_6_preg;
    sc_signal< sc_lv<16> > ap_return_7_preg;
    sc_signal< sc_lv<16> > ap_return_8_preg;
    sc_signal< sc_lv<16> > ap_return_9_preg;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<15> ap_const_lv15_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_icmp_ln1494_1_fu_124_p2();
    void thread_icmp_ln1494_2_fu_146_p2();
    void thread_icmp_ln1494_3_fu_168_p2();
    void thread_icmp_ln1494_4_fu_190_p2();
    void thread_icmp_ln1494_5_fu_212_p2();
    void thread_icmp_ln1494_6_fu_234_p2();
    void thread_icmp_ln1494_7_fu_256_p2();
    void thread_icmp_ln1494_8_fu_278_p2();
    void thread_icmp_ln1494_9_fu_300_p2();
    void thread_icmp_ln1494_fu_102_p2();
    void thread_select_ln45_1_fu_130_p3();
    void thread_select_ln45_2_fu_152_p3();
    void thread_select_ln45_3_fu_174_p3();
    void thread_select_ln45_4_fu_196_p3();
    void thread_select_ln45_5_fu_218_p3();
    void thread_select_ln45_6_fu_240_p3();
    void thread_select_ln45_7_fu_262_p3();
    void thread_select_ln45_8_fu_284_p3();
    void thread_select_ln45_9_fu_306_p3();
    void thread_select_ln45_fu_108_p3();
    void thread_trunc_ln1494_1_fu_120_p1();
    void thread_trunc_ln1494_2_fu_142_p1();
    void thread_trunc_ln1494_3_fu_164_p1();
    void thread_trunc_ln1494_4_fu_186_p1();
    void thread_trunc_ln1494_5_fu_208_p1();
    void thread_trunc_ln1494_6_fu_230_p1();
    void thread_trunc_ln1494_7_fu_252_p1();
    void thread_trunc_ln1494_8_fu_274_p1();
    void thread_trunc_ln1494_9_fu_296_p1();
    void thread_trunc_ln1494_fu_98_p1();
    void thread_zext_ln45_1_fu_138_p1();
    void thread_zext_ln45_2_fu_160_p1();
    void thread_zext_ln45_3_fu_182_p1();
    void thread_zext_ln45_4_fu_204_p1();
    void thread_zext_ln45_5_fu_226_p1();
    void thread_zext_ln45_6_fu_248_p1();
    void thread_zext_ln45_7_fu_270_p1();
    void thread_zext_ln45_8_fu_292_p1();
    void thread_zext_ln45_9_fu_314_p1();
    void thread_zext_ln45_fu_116_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
