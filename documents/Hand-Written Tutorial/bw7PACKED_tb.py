# imports
import math
from fxpmath import Fxp

# parameters
WIDTH = 17
NFRAC = 10
TABLE_SIZE = 2 ** NFRAC
PATH_MEM = '/Users/trinhnguyen/Documents/Research/'     # path to save .mem file to

# inputs to be converted to binary
# {1x10} 10x32 --> 1x32
INPUTS = [-0.5999865, 0.49528775, -0.86947435, -0.7755444, -0.0033234, -0.0033234, 1.5731839, 1.100351, -0.9850744, -0.0719832]

# weight to be converted to binary
# 1x10 {10x32} --> 1x32
RELU_WEIGHTS = [0.2346765, -0.18785273, 0.03306893, -0.04865392, -0.37488878, 0.64657915,
                0.05002118, 0.3129993, 0.33865908, -0.11960106, -0.10463461, -0.00423943,
                0.06562284, 0.19593789, 0.02697001, 0.25925136, -0.03908355, -0.10874453,
                -0.3107577, 0.1341874, 0.31469712, 0.06135666, -0.60910517, 0.21328084,
                0.03074411, 0.11172491, 0.33770066, -0.50567496, 0.46075577, 0.14492981, 0.5903918, -0.13950211,
                0.4893536, 0.9289008, -0.07519391, 0.10678146, 0.17483814, 0.04511181,
                -0.01201174, 0.2674849, 0.21741335, -0.05380236, 0.52133673, 0.7417041,
                0.2047601, 0.18986697, 0.6948964, -0.04708468, -0.06124179, -0.34488514,
                -0.23926501, 0.19915885, -0.1594274, 0.24316832, 0.56033474, -0.05668049,
                -0.30111718, 0.1403854, 0.96330994, -0.0040762, 0.01768304, -0.5940147, -0.4246656, 0.20169313,
                -1.3245741, -0.72283983, -1.1271293, 0.19697617, -0.4156195, 0.764006,
                -0.32771057, -0.35186702, 0.02516019, -1.401869, -0.40765938, -0.77937365,
                -0.18536039, -0.3527951, -0.3979553, 0.29993644, 0.5935526, 0.22067484,
                -0.90433156, 0.4034097, 0.65249175, 0.30393514, -0.23100713, 0.6796527,
                -0.6869981, 0.5372985, 0.44648007, 0.40460733, -0.15358846, -0.0578992, -0.1545833, -0.00519611,
                -0.96676666, -0.7297983, 0.07376412, -0.1277061, -0.17164148, 0.73556745,
                0.47909898, -0.1024794, 0.16272943, -0.25552943, 0.02213583, -0.5247967,
                -0.7679001, -0.14088346, 0.3759781, 0.4855907, 0.45802048, -0.60227644,
                -0.5164083, -0.3064643, 0.2985533, -0.5666302, 0.14078237, -0.2669794,
                -0.3120207, 0.35963145, -0.02755719, 0.68007916, -0.04620875, -0.5714893, -0.1548897, 0.2986629,
                0.04958748, 0.31498432, -0.21896206, 0.6766157, 0.22746402, -0.36729813,
                0.17308535, 0.34442458, 0.66882575, -0.37266335, -0.01161284, -0.29239136,
                0.3678315, 0.28797695, 0.13583268, -0.35593656, -0.253561, 0.23380354,
                -0.72458434, 0.18669689, 0.21021949, 0.18047442, -0.3369458, -0.18631707,
                0.11236935, -0.38049492, -0.23307922, -0.08214244, -0.4879591, 0.3527307, 0.4990905, -0.20329562,
                0.02423292, -0.3451888, -0.41433102, 0.6453147, -0.63590235, 0.00571232,
                -0.13703625, -0.18306667, 0.13401812, 0.14488791, 0.1331925, 0.2980638,
                -0.03348505, -0.18228868, -0.3067491, -0.284887, 0.56005436, 0.51544756,
                -0.29868153, 0.5671, 0.12533155, 0.09331404, 0.34351823, 0.42011338,
                -0.22896902, 0.36539117, -0.13216424, -0.21820267, -0.268777, -0.32214212, -0.49608064, 0.14460707,
                -0.04276624, 0.60958374, -0.34365043, -0.16253418, 0.30834424, -0.03549882,
                0.49133763, 0.2228067, 0.2538323, 0.40375543, 0.60483325, 0.58815056,
                0.22958802, -0.08105481, 0.28404248, -0.40662652, -0.6068167, -0.70569193,
                0.5825012, 0.6188738, -0.3953785, 0.1583977, -0.01689746, 0.16194575,
                0.24529725, 0.62339497, -0.17732629, 0.01020099, 0.7587281, -0.47030464, -0.16791622, -0.9995139,
                0.5630365, 0.31134522, 0.72638, -0.19519615, 0.22161457, -0.4372571,
                -0.24420404, -0.2504565, -0.21348336, 0.11776284, 0.5477103, 0.18115312,
                -0.05381807, 0.08979894, -0.00200347, 0.17798144, -0.3097832, 0.01021547,
                0.12130389, 0.6101871, -0.41105494, 0.43235266, 0.18040304, -0.38220543,
                0.29267627, -0.38870224, 0.16628642, -0.4671431, 0.6235937, -0.27671123, -0.29042208, -0.4853411,
                1.004028, 0.34747604, 0.15767696, 0.19231115, -0.07080028, -0.1206146,
                0.5942852, 0.5488716, -0.02226478, 0.3937866, 0.5297864, -1.2857907,
                1.1458975, -1.7438284,  -0.7068916, -0.18447423, -0.04482396, 0.671503,
                0.06987733, -0.26953882, 0.2705893, 0.8655217, 0.2423712, -0.12427205,
                0.3170434, -0.46265912, -0.6056538, -0.5719037, 0.33624625, 0.93277854, 0.46075556, -1.1252823,
                -0.42074504, -0.51841515, -0.03606353, 0.7509331, 0.3006202, 0.24004829,
                -0.46004036, -0.95848316, 0.6926908, -0.6110535, -0.44959906, -1.0703033,
                -0.13123375, 0.19046094, -0.3225902, -0.35318753, 0.5210098, 0.5363414,
                -0.09961554, -0.382841, 0.4574795, 0.84548503, 0.3476656, 0.88936865,
                -0.47447163, 0.81046087, 0.04874393, 0.09098957, -0.02577949, 0.21192479, -0.16131125, 0.04119068]

# to be converted to binary
# {1x32}
RELU_BIAS = [8.42707276e-01, 7.90710926e-01, 6.49383247e-01, 7.04174191e-02,
             4.08660680e-01,  1.72127271e-04, -3.81356090e-01,  4.74602312e-01,
             4.79601556e-03,  9.03386891e-01,  4.13944244e-01,  2.91701883e-01,
             1.86859876e-01,  7.75032043e-01,  9.80667233e-01, -3.35089751e-02,
             1.36530325e-01, -5.07931948e-01,  2.80194581e-01, -1.64520115e-01,
             1.15044557e-01,  4.62207913e-01,  5.38853407e-02, -2.80169636e-01,
             8.63157332e-01, -5.37123624e-03,  4.33017969e-01,  1.09317146e-01,
             4.49995667e-01,  2.69712031e-01,  5.07173121e-01, -2.44442746e-02]

# to be converted to binary
# 1x32 {32x1} --> 1x1
SIGMOID_WEIGHTS = [-1.1300431, -0.6147388, -0.8181553, -0.15405363, 0.28042835, 0.6325697, 1.2951672, -0.61801106, -0.21870765,
                  -1.6311167, 0.5533344, 1.2278495, -1.3381069, 1.195711, -0.6198427, 0.2936262, 0.49028823, -0.5914093,
                  -0.961876, -0.2772694, 0.36601153, -0.4308692, -0.1243472, -0.48681888, -0.39698985, -0.42644456, 0.75754553,
                  0.39438608, 0.9105948, -0.56294197, -0.20044921, 0.82076555]

# to be converted to binary
# 1x1
SIGMOID_BIAS = [0.09853196]

# to be converted to binary
# sigmoid inputs from relu (for missingMult analysis)
SIGMOID_INPUTS = [2.43898669, 3.55467905, 1.62312713, 0, 1.99306752, 0, 0, 0.40741056, 0, 2.78715734,
                  2.13648535, 4.21447649, 0.18711553, 2.84255413, 2.52785992, 0, 0, 0, 2.52652598, 1.6761235, 0, 0.53157057,
                  0.69666121, 0, 1.96505926, 0.20151939, 0.83901235, 0, 1.90461859, 0, 0, 0]

# This function takes in a string representing a binary and reformat the
# string the following format:
#       0b<integer>.<fractional>    
def FracDotFormat(binary):
    str = '0b' + binary[:WIDTH - NFRAC] + '.' + binary[WIDTH - NFRAC:]
    return str

# This function takes in an array of integers and a file name.
# The function converts the array of integers to fixed point binaries.
# The function writes the result to the given file name.
def DecimalToFixed(data, wfile_name):
    with open(PATH_MEM + wfile_name, 'w') as fp:
        for i in data:
            bnum = Fxp(str(i), True, WIDTH, NFRAC)
            fp.write(bnum.bin(frac_dot=False) + '\n')
    fp.close()


# Defines sigmoid function
def sigmoid(x):
    return 1.0/(1+math.exp(-x))


def Sigmoid_BRAM():
    # Create Memory File in form of WIDTH bit number with NFRAC being fractional
    # Only the ten bits actually need to be calculated with 0s prepended
    # since the value will always be between 0 and 1
    with open(PATH_MEM + 'bw7_nfrac2_Sigmoid_BRAM.mem', 'w') as fp:
        for i in range(TABLE_SIZE):
            in_val = 2*8.0*(i-TABLE_SIZE/2.0)/TABLE_SIZE
            sig = sigmoid(in_val)
            real_val = round(sig * TABLE_SIZE)
            if (real_val >= TABLE_SIZE):
                real_val = TABLE_SIZE - 1
            bin_val = bin(real_val)[2:]
            diff = NFRAC - len(bin_val)
            if diff > 0:
                leading_zeros = ''
                for _ in range(diff):
                    leading_zeros += '0'
                    bin_val = leading_zeros + bin_val
                    fp.write(bin_val + '\n')
        fp.close()


def main():
    #DecimalToFixed(SIGMOID_WEIGHTS, 'sigmoidWeights.mem')
    #DecimalToFixed(SIGMOID_INPUTS, 'inputs.mem')
    #DecimalToFixed([-0.5999865], 'test.txt')
    
    input = Fxp(-4.27655641, signed=True, n_word=WIDTH, n_frac=NFRAC)
    print("result: " + input.bin(frac_dot=False))
    
    #weight = Fxp(-0.1243472, signed=True, n_word=WIDTH, n_frac=NFRAC)
    #weight = Fxp(-0.21870765, signed=True, n_word=WIDTH, n_frac=NFRAC)

    #y = input*weight
    #shift5 = y * (2**5)
    
    

    #print(input)
    #print(input.bin(frac_dot=False))
    #print(weight)
    #print(weight.bin(frac_dot=False))

    #print("result: " + str(y))
    #print("result: " + y.bin(frac_dot=False))

    #neg = y * (-1)
    #print(neg)
    #print("neg: " + neg.bin(frac_dot=False))
    #print("shift5: " + shift5.bin(frac_dot=False))


    
    #DecimalToFixed(RELU_WEIGHTS, 'bw7_nfrac2_reluWeights.mem')
    #DecimalToFixed(RELU_BIAS, 'bw7_nfrac2_reluBias.mem')
    #DecimalToFixed(SIGMOID_WEIGHTS, 'bw7_nfrac2_sigmoidWeights.mem')
    #DecimalToFixed(SIGMOID_BIAS, 'bw7_nfrac2_sigmoidBias.mem')
    #DecimalToFixed([0.015097325], 'bw7_nfrac2_output.mem')
    #Sigmoid_BRAM()
    
if __name__ == '__main__':
    main()
